2018-02-05 07:38:15,009 [MainThread  ] [DEBUG]  parse_file(file_path=README.md, is_prereq=False
2018-02-05 07:38:15,009 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,./index.md)
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_next_step(Kubernetes Installation on Azure,./step01.md)
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 07:38:15,010 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 07:38:15,011 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 07:38:15,011 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 07:38:15,011 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 07:38:15,011 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 07:38:15,011 [MainThread  ] [DEBUG]  append_next_step(Back to Index,../../index.md)
2018-02-05 07:38:15,011 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 07:38:15,011 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 07:38:16,278 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 07:38:16,278 [MainThread  ] [DEBUG]  process()
2018-02-05 07:38:20,078 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/./index.md, is_prereq=False
2018-02-05 07:38:20,079 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 07:38:31,658 [MainThread  ] [DEBUG]  parse_file(file_path=README.md, is_prereq=False
2018-02-05 07:38:31,658 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 07:38:31,658 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 07:38:31,658 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:31,658 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 07:38:31,658 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 07:38:31,658 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Kubernetes Installation on Azure,./step01.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_next_step(Back to Index,../../index.md)
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 07:38:31,659 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 07:38:32,549 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 07:38:32,549 [MainThread  ] [DEBUG]  process()
2018-02-05 07:38:33,429 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/README.md, is_prereq=False
2018-02-05 07:38:33,430 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 07:38:33,431 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Kubernetes Installation on Azure,./step01.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 07:38:33,432 [MainThread  ] [DEBUG]  append_next_step(Back to Index,../../index.md)
2018-02-05 07:38:33,433 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 07:38:33,433 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 07:38:33,484 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 07:38:33,484 [MainThread  ] [DEBUG]  process()
2018-02-05 07:38:34,640 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/README.md, is_prereq=False
2018-02-05 07:38:34,641 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 07:38:34,641 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 07:38:34,641 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:34,641 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  append_next_step(Kubernetes Installation on Azure,./step01.md)
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 07:38:34,642 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 07:38:34,643 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 07:38:34,643 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 07:38:34,643 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 07:38:34,643 [MainThread  ] [DEBUG]  append_next_step(Back to Index,../../index.md)
2018-02-05 07:38:34,643 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 07:38:34,643 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 07:38:34,699 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 07:38:34,699 [MainThread  ] [DEBUG]  process()
2018-02-05 07:38:35,377 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/README.md, is_prereq=False
2018-02-05 07:38:35,378 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 07:38:35,378 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 07:38:35,378 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:35,378 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  append_next_step(Kubernetes Installation on Azure,./step01.md)
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 07:38:35,379 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 07:38:35,380 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 07:38:35,380 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 07:38:35,380 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 07:38:35,380 [MainThread  ] [DEBUG]  append_next_step(Back to Index,../../index.md)
2018-02-05 07:38:35,380 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 07:38:35,380 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 07:38:35,432 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 07:38:35,432 [MainThread  ] [DEBUG]  process()
2018-02-05 07:38:37,825 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/./step01.md, is_prereq=False
2018-02-05 07:38:37,825 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 07:38:37,829 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 07:38:37,829 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,829 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 07:38:37,829 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,829 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 07:38:37,830 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,830 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 07:38:37,830 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,830 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 07:38:37,830 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 07:38:37,830 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,831 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 07:38:37,831 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 07:38:37,831 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,831 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. \n'})
2018-02-05 07:38:37,831 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-<USER>', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 07:38:37,831 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 07:38:37,831 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az acs create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']})
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az acs kubernetes install-cli']})
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 07:38:37,832 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,833 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n\naz acs kubernetes get-credentials --resource-group=$RESOURCEGROUP\n\n'})
2018-02-05 07:38:37,833 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 07:38:37,833 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,833 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n\nkubectl cluster-info\n\n'})
2018-02-05 07:38:37,833 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-05 07:38:37,833 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 07:38:37,834 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 07:38:37,834 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 07:38:37,885 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 07:38:37,885 [MainThread  ] [DEBUG]  process()
2018-02-05 10:12:40,969 [MainThread  ] [DEBUG]  Output=None
2018-02-05 10:12:40,979 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-<USER>', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 10:12:40,980 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-<USER>)
2018-02-05 10:12:40,981 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-<USER>'
2018-02-05 10:12:41,041 [MainThread  ] [DEBUG]  Response: 'bash: syntax error near unexpected token `newline'
'
2018-02-05 10:12:41,549 [MainThread  ] [DEBUG]  Output=None
2018-02-05 10:12:41,549 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 10:12:41,549 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 10:12:41,549 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 10:12:47,197 [MainThread  ] [DEBUG]  parse_file(file_path=README.md, is_prereq=False
2018-02-05 10:12:47,197 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 10:12:47,198 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Kubernetes Installation on Azure,install-k8s.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_next_step(Back to Index,../../index.md)
2018-02-05 10:12:47,199 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 10:12:47,200 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 10:12:48,545 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 10:12:48,546 [MainThread  ] [DEBUG]  process()
2018-02-05 10:12:50,441 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/README.md, is_prereq=False
2018-02-05 10:12:50,441 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 10:12:50,442 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 10:12:50,442 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:12:50,442 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  append_next_step(Kubernetes Installation on Azure,install-k8s.md)
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 10:12:50,443 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 10:12:50,444 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 10:12:50,444 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 10:12:50,444 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 10:12:50,444 [MainThread  ] [DEBUG]  append_next_step(Back to Index,../../index.md)
2018-02-05 10:12:50,444 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-05 10:12:50,444 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 10:12:50,496 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 10:12:50,496 [MainThread  ] [DEBUG]  process()
2018-02-05 10:12:53,411 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/install-k8s.md, is_prereq=False
2018-02-05 10:12:53,411 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 10:13:01,783 [MainThread  ] [DEBUG]  parse_file(file_path=README.md, is_prereq=False
2018-02-05 10:13:01,783 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 10:13:01,784 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 10:13:01,785 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 10:13:01,785 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 10:13:01,785 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 10:13:01,785 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 10:13:01,785 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 10:13:01,785 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 10:13:01,785 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 10:13:02,655 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 10:13:02,655 [MainThread  ] [DEBUG]  process()
2018-02-05 10:13:04,242 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/create-aks-cluster.md, is_prereq=False
2018-02-05 10:13:04,243 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 10:13:04,250 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 10:13:04,250 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,250 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 10:13:04,250 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,250 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 10:13:04,251 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. \n'})
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-<USER>', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']})
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 10:13:04,252 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks kubernetes install-cli']})
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n\naz aks kubernetes get-credentials --resource-group=$RESOURCEGROUP\n\n'})
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n\nkubectl cluster-info\n\n'})
2018-02-05 10:13:04,253 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 10:13:04,254 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 10:13:04,255 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 10:13:04,306 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 10:13:04,306 [MainThread  ] [DEBUG]  process()
2018-02-05 10:16:05,837 [MainThread  ] [DEBUG]  Output=None
2018-02-05 10:16:05,844 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-<USER>', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 10:16:05,844 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-<USER>)
2018-02-05 10:16:05,844 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-<USER>'
2018-02-05 10:16:05,895 [MainThread  ] [DEBUG]  Response: 'bash: syntax error near unexpected token `newline'
'
2018-02-05 10:16:26,416 [MainThread  ] [DEBUG]  Output=None
2018-02-05 10:16:26,417 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 10:16:26,417 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 10:16:26,417 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 10:16:28,061 [MainThread  ] [DEBUG]  Response: '[31maz group create: error: argument --name/--resource-group/-n/-g: expected one argument[0m
usage: az group create [-h] [--verbose] [--debug]
                       [--output {json,jsonc,table,tsv}] [--query JMESPATH]
                       --name RG_NAME --location LOCATION
                       [--tags [TAGS [TAGS ...]]]
'
2018-02-05 10:16:28,061 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-<USER>', 'az group create --name $RESOURCE_GROUP --location southcentralus']}
2018-02-05 10:16:28,100 [MainThread  ] [DEBUG]  Output=None
2018-02-05 10:16:28,100 [MainThread  ] [DEBUG]  deque(['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys'])
2018-02-05 10:16:28,100 [MainThread  ] [DEBUG]  run_command(az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys)
2018-02-05 10:16:28,100 [MainThread  ] [DEBUG]  Execute command: 'az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys'
2018-02-05 10:16:29,232 [MainThread  ] [DEBUG]  Response: '[31maz aks create: error: argument --name/-n: expected one argument[0m
usage: az aks create [-h] [--verbose] [--debug]
                     [--output {json,jsonc,table,tsv}] [--query JMESPATH]
                     --resource-group RESOURCE_GROUP_NAME --name NAME
                     [--ssh-key-value SSH_KEY_VALUE]
                     [--dns-name-prefix DNS_NAME_PREFIX] [--location LOCATION]
                     [--admin-username ADMIN_USERNAME]
                     [--kubernetes-version KUBERNETES_VERSION]
                     [--node-vm-size NODE_VM_SIZE]
                     [--node-osdisk-size NODE_OSDISK_SIZE]
                     [--node-count NODE_COUNT]
                     [--service-principal SERVICE_PRINCIPAL]
                     [--client-secret CLIENT_SECRET]
                     [--tags [TAGS [TAGS ...]]] [--generate-ssh-keys]
                     [--no-wait]
'
2018-02-05 10:16:29,233 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']}
2018-02-05 10:16:29,534 [MainThread  ] [DEBUG]  Output=None
2018-02-05 10:16:29,534 [MainThread  ] [DEBUG]  deque(['az aks kubernetes install-cli'])
2018-02-05 10:16:29,534 [MainThread  ] [DEBUG]  run_command(az aks kubernetes install-cli)
2018-02-05 10:16:29,535 [MainThread  ] [DEBUG]  Execute command: 'az aks kubernetes install-cli'
2018-02-05 10:16:32,772 [MainThread  ] [DEBUG]  parse_file(file_path=README.md, is_prereq=False
2018-02-05 10:16:32,772 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 10:16:32,773 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 10:16:32,773 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:32,773 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 10:16:32,773 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 10:16:32,773 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:32,773 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 10:16:32,773 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 10:16:32,774 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 10:16:32,774 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 10:16:32,774 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 10:16:32,774 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 10:16:32,774 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 10:16:32,774 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 10:16:32,774 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 10:16:32,775 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 10:16:32,775 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 10:16:34,008 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 10:16:34,008 [MainThread  ] [DEBUG]  process()
2018-02-05 10:16:36,172 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/create-aks-cluster.md, is_prereq=False
2018-02-05 10:16:36,172 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 10:16:36,180 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 10:16:36,180 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,180 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 10:16:36,180 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,180 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 10:16:36,180 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,181 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 10:16:36,181 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,181 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 10:16:36,181 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 10:16:36,181 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,181 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 10:16:36,181 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. \n'})
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']})
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 10:16:36,182 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks kubernetes install-cli']})
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n\naz aks kubernetes get-credentials --resource-group=$RESOURCEGROUP\n\n'})
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n\nkubectl cluster-info\n\n'})
2018-02-05 10:16:36,183 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 10:16:36,184 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 10:16:36,185 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 10:16:36,236 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 10:16:36,236 [MainThread  ] [DEBUG]  process()
2018-02-05 11:32:52,845 [MainThread  ] [DEBUG]  Output=None
2018-02-05 11:32:52,849 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 11:32:52,850 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 11:32:52,851 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 11:32:52,909 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 11:32:53,437 [MainThread  ] [DEBUG]  Output=None
2018-02-05 11:32:53,437 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 11:32:53,437 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 11:32:53,437 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 11:32:58,897 [MainThread  ] [DEBUG]  parse_file(file_path=README.md, is_prereq=False
2018-02-05 11:32:58,897 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 11:32:58,903 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 11:32:58,903 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:32:58,903 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 11:32:58,904 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 11:32:58,905 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 11:32:58,905 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 11:32:58,905 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 11:33:00,209 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 11:33:00,209 [MainThread  ] [DEBUG]  process()
2018-02-05 11:33:01,654 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/create-aks-cluster.md, is_prereq=False
2018-02-05 11:33:01,654 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 11:33:01,662 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 11:33:01,662 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,662 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 11:33:01,662 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,662 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 11:33:01,662 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 11:33:01,663 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "*NOTE: For simplicity's sake, we will use the same name for the Resource Group and the DNS Prefix.  To prevent DNS name collisions, make sure to suffix RESOURCE_GROUP with your username.*"})
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. \n'})
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']})
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 11:33:01,664 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks kubernetes install-cli']})
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*GROUP --name=$RESOURCE*'})
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n\naz aks kubernetes get-credentials --resource-group=$RESOURCEGROUP\n\n'})
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 11:33:01,665 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n\nkubectl cluster-info\n\n'})
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 11:33:01,666 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 11:33:01,667 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 11:33:01,667 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 11:33:01,667 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 11:33:01,719 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 11:33:01,719 [MainThread  ] [DEBUG]  process()
2018-02-05 11:35:09,742 [MainThread  ] [DEBUG]  Output=None
2018-02-05 11:35:09,748 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 11:35:09,748 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 11:35:09,748 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 11:35:09,804 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 11:35:09,805 [MainThread  ] [DEBUG]  Output=None
2018-02-05 11:35:09,805 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 11:35:09,805 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 11:35:09,805 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 12:09:38,479 [MainThread  ] [DEBUG]  parse_file(file_path=README.md, is_prereq=False
2018-02-05 12:09:38,480 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 12:09:38,481 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 12:09:38,481 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Created at Microsoft by Lamia Youseff, David Read, Stas Kondratiev, Tommy Falgout\n'})
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Goals'})
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 12:09:38,482 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 12:09:38,483 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 12:09:38,483 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 12:09:38,483 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 12:09:39,852 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 12:09:39,852 [MainThread  ] [DEBUG]  process()
2018-02-05 12:09:41,676 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/create-aks-cluster.md, is_prereq=False
2018-02-05 12:09:41,676 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 12:09:41,680 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "*NOTE: For simplicity's sake, we will use the same name for the Resource Group and the DNS Prefix.  To prevent DNS name collisions, make sure to suffix RESOURCE_GROUP with your username.*"})
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '`RESOURCE_GROUP=my-k8s-cluster-thfalgou`'})
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. \n'})
2018-02-05 12:09:41,681 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks kubernetes install-cli']})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 12:09:41,682 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*GROUP --name=$RESOURCE*'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n\naz aks kubernetes get-credentials --resource-group=$RESOURCEGROUP\n\n'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n\nkubectl cluster-info\n\n'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 12:09:41,683 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 12:09:41,684 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 12:09:41,736 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 12:09:41,736 [MainThread  ] [DEBUG]  process()
2018-02-05 12:09:59,374 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:09:59,381 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 12:09:59,381 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 12:09:59,381 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 12:09:59,432 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 12:09:59,594 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:09:59,594 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 12:09:59,594 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 12:09:59,594 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 12:10:47,349 [MainThread  ] [DEBUG]  parse_file(file_path=create-aks-cluster.md, is_prereq=False
2018-02-05 12:10:47,349 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 12:10:47,351 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "*NOTE: For simplicity's sake, we will use the same name for the Resource Group and the DNS Prefix.  To prevent DNS name collisions, make sure to suffix RESOURCE_GROUP with your username.*"})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '`RESOURCE_GROUP=my-k8s-cluster-thfalgou`'})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. \n'})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 12:10:47,352 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks kubernetes install-cli']})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*GROUP --name=$RESOURCE*'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n\naz aks kubernetes get-credentials --resource-group=$RESOURCEGROUP\n\n'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '```'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n\nkubectl cluster-info\n\n'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 12:10:47,353 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 12:10:47,354 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 12:10:48,275 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 12:10:48,276 [MainThread  ] [DEBUG]  process()
2018-02-05 12:14:28,263 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:14:28,263 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 12:14:28,263 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 12:14:28,264 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 12:14:28,318 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 12:14:28,458 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:14:28,458 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 12:14:28,458 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 12:14:28,459 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 12:14:29,604 [MainThread  ] [DEBUG]  parse_file(file_path=create-aks-cluster.md, is_prereq=False
2018-02-05 12:14:29,604 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 12:14:29,611 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 12:14:29,611 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,611 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 12:14:29,611 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,611 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 12:14:29,611 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,612 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 12:14:29,612 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,612 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 12:14:29,612 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 12:14:29,612 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,612 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "*NOTE: For simplicity's sake, we will use the same name for the Resource Group and the DNS Prefix.  To prevent DNS name collisions, make sure to suffix RESOURCE_GROUP with your username.*"})
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. `RESOURCE_GROUP=my-k8s-cluster-thfalgou`\n'})
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 12:14:29,613 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks kubernetes install-cli']})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*GROUP --name=$RESOURCE*'})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n```\naz aks kubernetes get-credentials --resource-group=$RESOURCEGROUP\n```\n'})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 12:14:29,614 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n```\nkubectl cluster-info\n```\n'})
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 12:14:29,615 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 12:14:29,616 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 12:14:30,530 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 12:14:30,531 [MainThread  ] [DEBUG]  process()
2018-02-05 12:18:34,065 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:18:34,072 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 12:18:34,072 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 12:18:34,072 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 12:18:34,124 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 12:18:35,650 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:18:35,650 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 12:18:35,650 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 12:18:35,650 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 12:18:40,215 [MainThread  ] [DEBUG]  Response: '{
  "id": "/subscriptions/df8428d4-bc25-4601-b458-1c8533ceec0b/resourceGroups/my-k8s-cluster-thfalgou",
  "location": "southcentralus",
  "managedBy": null,
  "name": "my-k8s-cluster-thfalgou",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
'
2018-02-05 12:18:40,215 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']}
2018-02-05 12:18:50,062 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:18:50,063 [MainThread  ] [DEBUG]  deque(['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys'])
2018-02-05 12:18:50,063 [MainThread  ] [DEBUG]  run_command(az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys)
2018-02-05 12:18:50,063 [MainThread  ] [DEBUG]  Execute command: 'az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys'
2018-02-05 12:18:51,092 [MainThread  ] [DEBUG]  Response: '[31maz: error: unrecognized arguments: --orchestrator-type Kubernetes --dns-prefix my-k8s-cluster-thfalgou[0m
usage: az [-h] [--verbose] [--debug] [--output {json,jsonc,table,tsv}]
          [--query JMESPATH]
          {aks} ...
'
2018-02-05 12:18:51,092 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['az aks create --name $RESOURCE_GROUP --resource-group $RESOURCE_GROUP --orchestrator-type Kubernetes --dns-prefix $RESOURCE_GROUP --generate-ssh-keys']}
2018-02-05 12:19:08,860 [MainThread  ] [DEBUG]  Output=None
2018-02-05 12:19:08,861 [MainThread  ] [DEBUG]  deque(['az aks kubernetes install-cli'])
2018-02-05 12:19:08,861 [MainThread  ] [DEBUG]  run_command(az aks kubernetes install-cli)
2018-02-05 12:19:08,861 [MainThread  ] [DEBUG]  Execute command: 'az aks kubernetes install-cli'
2018-02-05 14:31:44,785 [MainThread  ] [DEBUG]  parse_file(file_path=create-aks-cluster.md, is_prereq=False
2018-02-05 14:31:44,786 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 14:31:44,787 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 14:31:44,788 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "*NOTE: For simplicity's sake, we will use the same name for the Resource Group and the DNS Prefix.  To prevent DNS name collisions, make sure to suffix RESOURCE_GROUP with your username.*"})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. `RESOURCE_GROUP=my-k8s-cluster-thfalgou`\n'})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys']})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks install-cli']})
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:31:44,789 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n'})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP']})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n'})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl cluster-info', 'kubectl get nodes']})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 14:31:44,790 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 14:31:44,791 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 14:31:44,791 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 14:31:44,791 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 14:31:44,791 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 14:31:44,791 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 14:31:44,791 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 14:31:46,119 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:31:46,119 [MainThread  ] [DEBUG]  process()
2018-02-05 14:31:48,141 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:31:48,151 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 14:31:48,152 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 14:31:48,152 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 14:31:48,205 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:31:49,498 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:31:49,498 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location southcentralus'])
2018-02-05 14:31:49,498 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location southcentralus)
2018-02-05 14:31:49,498 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location southcentralus'
2018-02-05 14:31:53,714 [MainThread  ] [DEBUG]  Response: '{
  "id": "/subscriptions/df8428d4-bc25-4601-b458-1c8533ceec0b/resourceGroups/my-k8s-cluster-thfalgou",
  "location": "southcentralus",
  "managedBy": null,
  "name": "my-k8s-cluster-thfalgou",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
'
2018-02-05 14:31:53,715 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group create --name $RESOURCE_GROUP --location southcentralus']}
2018-02-05 14:31:55,146 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:31:55,146 [MainThread  ] [DEBUG]  deque(['az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys'])
2018-02-05 14:31:55,147 [MainThread  ] [DEBUG]  run_command(az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys)
2018-02-05 14:31:55,147 [MainThread  ] [DEBUG]  Execute command: 'az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys'
2018-02-05 14:31:58,606 [MainThread  ] [DEBUG]  Response: 'Finished service principal creation[##################################]  100.0000%[31mThe provided location 'southcentralus' is not available for resource type 'Microsoft.ContainerService/managedClusters'. List of available regions for the resource type is 'eastus,westeurope,centralus,canadacentral,canadaeast,westus2'.[0m
'
2018-02-05 14:31:58,606 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys']}
2018-02-05 14:32:18,179 [MainThread  ] [DEBUG]  Received Break request
2018-02-05 14:32:18,830 [MainThread  ] [DEBUG]  Execute command: 'az provider register -n Microsoft.ContainerService'
2018-02-05 14:32:21,895 [MainThread  ] [DEBUG]  Response: '[33mRegistering is still on-going. You can monitor using 'az provider show -n Microsoft.ContainerService'[0m
'
2018-02-05 14:32:21,895 [MainThread  ] [DEBUG]  Output=[33mRegistering is still on-going. You can monitor using 'az provider show -n Microsoft.ContainerService'[0m

2018-02-05 14:32:21,895 [MainThread  ] [DEBUG]  deque(['az aks install-cli'])
2018-02-05 14:32:49,451 [MainThread  ] [DEBUG]  Received Break request
2018-02-05 14:32:56,024 [MainThread  ] [DEBUG]  Execute command: 'az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys'
2018-02-05 14:32:57,746 [MainThread  ] [DEBUG]  Response: '[31mThe provided location 'southcentralus' is not available for resource type 'Microsoft.ContainerService/managedClusters'. List of available regions for the resource type is 'eastus,westeurope,centralus,canadacentral,canadaeast,westus2'.[0m
'
2018-02-05 14:32:57,746 [MainThread  ] [DEBUG]  Output=[31mThe provided location 'southcentralus' is not available for resource type 'Microsoft.ContainerService/managedClusters'. List of available regions for the resource type is 'eastus,westeurope,centralus,canadacentral,canadaeast,westus2'.[0m

2018-02-05 14:32:57,746 [MainThread  ] [DEBUG]  deque(['az aks install-cli'])
2018-02-05 14:34:26,873 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:34:26,879 [MainThread  ] [DEBUG]  deque(['az aks install-cli'])
2018-02-05 14:34:26,880 [MainThread  ] [DEBUG]  run_command(az aks install-cli)
2018-02-05 14:34:26,880 [MainThread  ] [DEBUG]  Execute command: 'az aks install-cli'
2018-02-05 14:37:27,207 [MainThread  ] [DEBUG]  parse_file(file_path=cleanup.md, is_prereq=False
2018-02-05 14:37:27,208 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 14:37:27,208 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Cleanup'})
2018-02-05 14:37:27,208 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:37:27,208 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Delete Cluster Resource Group'})
2018-02-05 14:37:27,208 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:37:27,208 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az group delete --name $RESOURCE_GROUP -y', '```']})
2018-02-05 14:37:27,209 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:37:27,209 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 14:37:28,443 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:37:28,443 [MainThread  ] [DEBUG]  process()
2018-02-05 14:37:32,911 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:37:32,911 [MainThread  ] [DEBUG]  deque(['az group delete --name $RESOURCE_GROUP -y', '```'])
2018-02-05 14:37:32,911 [MainThread  ] [DEBUG]  run_command(az group delete --name $RESOURCE_GROUP -y)
2018-02-05 14:37:32,911 [MainThread  ] [DEBUG]  Execute command: 'az group delete --name $RESOURCE_GROUP -y'
2018-02-05 14:37:34,321 [MainThread  ] [DEBUG]  Response: '[31maz group delete: error: argument --name/-n/--resource-group/-g: expected one argument[0m
usage: az group delete [-h] [--verbose] [--debug]
                       [--output {json,jsonc,table,tsv}] [--query JMESPATH]
                       --name RESOURCE_GROUP_NAME [--yes] [--no-wait]
'
2018-02-05 14:38:00,881 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:00,883 [MainThread  ] [DEBUG]  deque(['```'])
2018-02-05 14:38:00,883 [MainThread  ] [DEBUG]  run_command(```)
2018-02-05 14:38:00,883 [MainThread  ] [DEBUG]  Execute command: '```'
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  parse_file(file_path=cleanup.md, is_prereq=False
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Cleanup'})
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Delete Cluster Resource Group'})
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y', '```']})
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:38:02,923 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 14:38:04,287 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:38:04,287 [MainThread  ] [DEBUG]  process()
2018-02-05 14:38:06,216 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:06,216 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y', '```'])
2018-02-05 14:38:06,216 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 14:38:06,216 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 14:38:06,272 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:38:07,077 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:07,077 [MainThread  ] [DEBUG]  deque(['az group delete --name $RESOURCE_GROUP -y', '```'])
2018-02-05 14:38:07,077 [MainThread  ] [DEBUG]  run_command(az group delete --name $RESOURCE_GROUP -y)
2018-02-05 14:38:07,077 [MainThread  ] [DEBUG]  Execute command: 'az group delete --name $RESOURCE_GROUP -y'
2018-02-05 14:38:08,733 [MainThread  ] [DEBUG]  Response: '[31mResource group 'my-k8s-cluster-thfalgou' could not be found.[0m
'
2018-02-05 14:38:14,780 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:14,780 [MainThread  ] [DEBUG]  deque(['```'])
2018-02-05 14:38:14,780 [MainThread  ] [DEBUG]  run_command(```)
2018-02-05 14:38:14,780 [MainThread  ] [DEBUG]  Execute command: '```'
2018-02-05 14:38:21,254 [MainThread  ] [DEBUG]  parse_file(file_path=cleanup.md, is_prereq=False
2018-02-05 14:38:21,254 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 14:38:21,254 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Cleanup'})
2018-02-05 14:38:21,254 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:21,254 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Delete Cluster Resource Group'})
2018-02-05 14:38:21,254 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:21,254 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y']})
2018-02-05 14:38:21,255 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:38:21,255 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 14:38:22,218 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:38:22,218 [MainThread  ] [DEBUG]  process()
2018-02-05 14:38:22,871 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:22,871 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y'])
2018-02-05 14:38:22,871 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 14:38:22,871 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 14:38:22,922 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:38:23,329 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:23,329 [MainThread  ] [DEBUG]  deque(['az group delete --name $RESOURCE_GROUP -y'])
2018-02-05 14:38:23,329 [MainThread  ] [DEBUG]  run_command(az group delete --name $RESOURCE_GROUP -y)
2018-02-05 14:38:23,329 [MainThread  ] [DEBUG]  Execute command: 'az group delete --name $RESOURCE_GROUP -y'
2018-02-05 14:38:24,432 [MainThread  ] [DEBUG]  Response: '[31mResource group 'my-k8s-cluster-thfalgou' could not be found.[0m
'
2018-02-05 14:38:24,433 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y']}
2018-02-05 14:38:33,389 [MainThread  ] [DEBUG]  parse_file(file_path=create-aks-cluster.md, is_prereq=False
2018-02-05 14:38:33,390 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 14:38:33,396 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-05 14:38:33,397 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "*NOTE: For simplicity's sake, we will use the same name for the Resource Group and the DNS Prefix.  To prevent DNS name collisions, make sure to suffix RESOURCE_GROUP with your username.*"})
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. `RESOURCE_GROUP=my-k8s-cluster-thfalgou`\n'})
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'LOCATION=westus2', 'az group create --name $RESOURCE_GROUP --location $LOCATION']})
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-05 14:38:33,399 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys']})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks install-cli']})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n'})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP']})
2018-02-05 14:38:33,400 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n'})
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl cluster-info', 'kubectl get nodes']})
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,./step02.md)
2018-02-05 14:38:33,401 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-05 14:38:33,402 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-05 14:38:33,402 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-05 14:38:33,402 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-05 14:38:33,402 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-05 14:38:33,402 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 14:38:34,391 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:38:34,391 [MainThread  ] [DEBUG]  process()
2018-02-05 14:38:35,752 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:35,753 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'LOCATION=westus2', 'az group create --name $RESOURCE_GROUP --location $LOCATION'])
2018-02-05 14:38:35,753 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 14:38:35,753 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 14:38:35,807 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:38:39,004 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:39,004 [MainThread  ] [DEBUG]  deque(['LOCATION=westus2', 'az group create --name $RESOURCE_GROUP --location $LOCATION'])
2018-02-05 14:38:39,004 [MainThread  ] [DEBUG]  run_command(LOCATION=westus2)
2018-02-05 14:38:39,005 [MainThread  ] [DEBUG]  Execute command: 'LOCATION=westus2'
2018-02-05 14:38:39,058 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 14:38:40,093 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:40,093 [MainThread  ] [DEBUG]  deque(['az group create --name $RESOURCE_GROUP --location $LOCATION'])
2018-02-05 14:38:40,093 [MainThread  ] [DEBUG]  run_command(az group create --name $RESOURCE_GROUP --location $LOCATION)
2018-02-05 14:38:40,094 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location $LOCATION'
2018-02-05 14:38:41,738 [MainThread  ] [DEBUG]  Response: '{
  "id": "/subscriptions/df8428d4-bc25-4601-b458-1c8533ceec0b/resourceGroups/my-k8s-cluster-thfalgou",
  "location": "westus2",
  "managedBy": null,
  "name": "my-k8s-cluster-thfalgou",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
'
2018-02-05 14:38:41,739 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'LOCATION=westus2', 'az group create --name $RESOURCE_GROUP --location $LOCATION']}
2018-02-05 14:38:45,613 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:38:45,613 [MainThread  ] [DEBUG]  deque(['az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys'])
2018-02-05 14:38:45,613 [MainThread  ] [DEBUG]  run_command(az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys)
2018-02-05 14:38:45,613 [MainThread  ] [DEBUG]  Execute command: 'az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys'
2018-02-05 14:43:28,527 [MainThread  ] [DEBUG]  Response: '[K - Starting ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Finished ..[K{
  "agentPoolProfiles": [
    {
      "count": 3,
      "dnsPrefix": null,
      "fqdn": null,
      "name": "nodepool1",
      "osDiskSizeGb": null,
      "osType": "Linux",
      "ports": null,
      "storageProfile": "ManagedDisks",
      "vmSize": "Standard_D1_v2",
      "vnetSubnetId": null
    }
  ],
  "dnsPrefix": "my-k8s-clu-my-k8s-cluster-t-df8428",
  "fqdn": "my-k8s-clu-my-k8s-cluster-t-df8428-aa3a566a.hcp.westus2.azmk8s.io",
  "id": "/subscriptions/df8428d4-bc25-4601-b458-1c8533ceec0b/resourcegroups/my-k8s-cluster-thfalgou/providers/Microsoft.ContainerService/managedClusters/my-k8s-cluster-thfalgou",
  "kubernetesVersion": "1.7.7",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDjBBKNpQXXdpZn1WQKnoaL/HrWwjgginarHJfdunIrg6mk5A2t5S2I9hDPSEJ5pHdU7nc8vzixEgot4G6PiYrPglenXFl65xr6jhDdIuPSUYmWCwqMjX8XYl9nd9TUmFk0TmrLQrt9fcWOdhpmLpuPqQjiwFDkPBw10oz7foudLXdqkIS/7OtH8bG3rqsQhGgGfumY2CfA1mEPyXWBex9n0FTyoU+kU7CcZEk9H/leA1yRWASDf95ZsQ50kueAgV5puSWD80abwzFZgHRtoSWZ91tunELjaU6ZxAw1po6km74sZRkcPjbgWvg+CXmJv181ZZv7F4B8ynyvqBYO8wKgkvM/LD84LsAUjhdiwxWSbsR1sPjvWETUbzbDBdPG4wp/6auGfpuMJafser7XDCX5ider8Zive7nPJ/ZDcL/UjG9MmTSLdKV6A9B5+vLTOj0AV8MXlprI/HfYmoSsM0K6bPyUdUHcFhCx6ycLTwDS/sM0KpYEAFkIdOWngERbk30xOfemlJYa9Y0fsvsU7nlu943syeyiDTNwFbGB/rO2bcukv6ixk0tlOvc3uFP4bL/S3vLXhmWM9NuLHj4RrknxlZPr5D66Porvg3MD3bRSS5F/PEm8zBXn59TKUdCvKxHXrS/67TGF5PW29m7LBjZP8Ez66CHb4dl+ye9mzpMqkQ== tommy@lastcoolnameleft.com\n"
        }
      ]
    }
  },
  "location": "westus2",
  "name": "my-k8s-cluster-thfalgou",
  "provisioningState": "Succeeded",
  "resourceGroup": "my-k8s-cluster-thfalgou",
  "servicePrincipalProfile": {
    "clientId": "c9b0318d-cbe6-4833-9465-ee47931a3345",
    "keyVaultSecretRef": null,
    "secret": null
  },
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters"
}
'
2018-02-05 14:43:28,530 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys']}
2018-02-05 14:43:56,155 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:43:56,156 [MainThread  ] [DEBUG]  deque(['az aks install-cli'])
2018-02-05 14:43:56,156 [MainThread  ] [DEBUG]  run_command(az aks install-cli)
2018-02-05 14:43:56,156 [MainThread  ] [DEBUG]  Execute command: 'az aks install-cli'
2018-02-05 14:44:05,511 [MainThread  ] [DEBUG]  Response: '[33mDownloading client to /usr/local/bin/kubectl from https://storage.googleapis.com/kubernetes-release/release/v1.9.2/bin/darwin/amd64/kubectl[0m
'
2018-02-05 14:44:05,512 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['az aks install-cli']}
2018-02-05 14:44:09,779 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:44:09,779 [MainThread  ] [DEBUG]  deque(['az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP'])
2018-02-05 14:44:09,779 [MainThread  ] [DEBUG]  run_command(az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP)
2018-02-05 14:44:09,779 [MainThread  ] [DEBUG]  Execute command: 'az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP'
2018-02-05 14:44:11,998 [MainThread  ] [DEBUG]  Response: 'Merged "my-k8s-cluster-thfalgou" as current context in /Users/thfalgou/.kube/config
'
2018-02-05 14:44:11,998 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP']}
2018-02-05 14:44:17,988 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:44:17,988 [MainThread  ] [DEBUG]  deque(['kubectl cluster-info', 'kubectl get nodes'])
2018-02-05 14:44:17,988 [MainThread  ] [DEBUG]  run_command(kubectl cluster-info)
2018-02-05 14:44:17,988 [MainThread  ] [DEBUG]  Execute command: 'kubectl cluster-info'
2018-02-05 14:44:19,670 [MainThread  ] [DEBUG]  Response: '[0;32mKubernetes master[0m is running at [0;33mhttps://my-k8s-clu-my-k8s-cluster-t-df8428-aa3a566a.hcp.westus2.azmk8s.io:443[0m
[0;32mHeapster[0m is running at [0;33mhttps://my-k8s-clu-my-k8s-cluster-t-df8428-aa3a566a.hcp.westus2.azmk8s.io:443/api/v1/namespaces/kube-system/services/heapster/proxy[0m
[0;32mKubeDNS[0m is running at [0;33mhttps://my-k8s-clu-my-k8s-cluster-t-df8428-aa3a566a.hcp.westus2.azmk8s.io:443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy[0m
[0;32mkubernetes-dashboard[0m is running at [0;33mhttps://my-k8s-clu-my-k8s-cluster-t-df8428-aa3a566a.hcp.westus2.azmk8s.io:443/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy[0m

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
'
2018-02-05 14:44:24,654 [MainThread  ] [DEBUG]  Output=None
2018-02-05 14:44:24,654 [MainThread  ] [DEBUG]  deque(['kubectl get nodes'])
2018-02-05 14:44:24,654 [MainThread  ] [DEBUG]  run_command(kubectl get nodes)
2018-02-05 14:44:24,655 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-05 14:44:25,042 [MainThread  ] [DEBUG]  Response: 'No resources found.
'
2018-02-05 14:44:25,042 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl cluster-info', 'kubectl get nodes']}
2018-02-05 15:24:23,344 [MainThread  ] [DEBUG]  parse_file(file_path=cleanup.md, is_prereq=False
2018-02-05 15:24:23,345 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-05 15:24:23,346 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Cleanup'})
2018-02-05 15:24:23,347 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 15:24:23,347 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Delete Cluster Resource Group'})
2018-02-05 15:24:23,347 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-05 15:24:23,347 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y']})
2018-02-05 15:24:23,347 [MainThread  ] [DEBUG]  set_block(None)
2018-02-05 15:24:23,347 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-05 15:24:24,618 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 15:24:24,618 [MainThread  ] [DEBUG]  process()
2018-02-05 15:24:26,022 [MainThread  ] [DEBUG]  Output=None
2018-02-05 15:24:26,022 [MainThread  ] [DEBUG]  deque(['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y'])
2018-02-05 15:24:26,022 [MainThread  ] [DEBUG]  run_command(RESOURCE_GROUP=my-k8s-cluster-$USER)
2018-02-05 15:24:26,022 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-05 15:24:26,078 [MainThread  ] [DEBUG]  Response: ''
2018-02-05 15:24:26,189 [MainThread  ] [DEBUG]  Output=None
2018-02-05 15:24:26,189 [MainThread  ] [DEBUG]  deque(['az group delete --name $RESOURCE_GROUP -y'])
2018-02-05 15:24:26,189 [MainThread  ] [DEBUG]  run_command(az group delete --name $RESOURCE_GROUP -y)
2018-02-05 15:24:26,189 [MainThread  ] [DEBUG]  Execute command: 'az group delete --name $RESOURCE_GROUP -y'
2018-02-05 15:26:14,639 [MainThread  ] [DEBUG]  Response: '[K - Starting ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Finished ..[K'
2018-02-05 15:26:14,640 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'az group delete --name $RESOURCE_GROUP -y']}
2018-02-06 09:29:56,932 [MainThread  ] [DEBUG]  parse_file(file_path=create-aks-cluster.md, is_prereq=False
2018-02-06 09:29:56,932 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 09:29:56,933 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 09:29:56,933 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Kubernetes Installation on Azure'})
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Outline'})
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Details'})
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The following steps will create the Kubernetes cluster using command line commands: \n'})
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download and install Azure CLI'})
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,934 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If you don’t have it installed locally, follow the guide here to install Azure CLI v2 on your local machine.\n'})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Login to your Azure subscription and create a new resource group'})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "*NOTE: For simplicity's sake, we will use the same name for the Resource Group and the DNS Prefix.  To prevent DNS name collisions, make sure to suffix RESOURCE_GROUP with your username.*"})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '  e.g. `RESOURCE_GROUP=my-k8s-cluster-thfalgou`\n'})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['RESOURCE_GROUP=my-k8s-cluster-$USER', 'LOCATION=westus2', 'az group create --name $RESOURCE_GROUP --location $LOCATION']})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create the Kubernetes cluster'})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys']})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The above command will use ACS to create a new Kubernetes cluster named "my-k8-cluster" within the newly created resource group. The orchestrator-type parameter indicates to ACS that you are creating a kubernetes cluster with a dns parameter and to generate new ssh keys and service principals. \n'})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Install Kubectl command line.'})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'If not already installed, you can use the cli to install the k8 command line utility (kubectl).\n> Note: On Windows you need to have opened the command windows with Administrator rights as the installation tries write the program to "C:\\Program Files\\kubectl.exe". You may also have to add “C:\\Program Files” to your PATH\n'})
2018-02-06 09:29:56,935 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks install-cli']})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Download the k8s cluster configuration (including credentials):'})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The kubectl application requires configuration data which includes the cluster endpoint and credentails. The credentails are created on the cluster admin server during installation and can be downloaded to your machine using the get-credential subcommand.\n'})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP']})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Test your Kubernetes Installation:'})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'After downloading the cluster configuration you should be able to connect to the cluster using kubectl. For example the cluster-info command will show details about your cluster.\n'})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl cluster-info', 'kubectl get nodes']})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': '*<-- You are here*'})
2018-02-06 09:29:56,936 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-06 09:29:56,937 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,k8s-hello-world.md)
2018-02-06 09:29:56,937 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-06 09:29:56,937 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-06 09:29:56,937 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-06 09:29:56,937 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-06 09:29:56,937 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-06 09:29:56,937 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 09:29:58,332 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 09:29:58,333 [MainThread  ] [DEBUG]  process()
2018-02-06 09:29:58,333 [MainThread  ] [DEBUG]  Execute command: 'RESOURCE_GROUP=my-k8s-cluster-$USER'
2018-02-06 09:29:58,387 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 09:29:58,388 [MainThread  ] [DEBUG]  Execute command: 'LOCATION=westus2'
2018-02-06 09:29:58,439 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 09:29:58,439 [MainThread  ] [DEBUG]  Execute command: 'az group create --name $RESOURCE_GROUP --location $LOCATION'
2018-02-06 09:30:02,175 [MainThread  ] [DEBUG]  Response: '{
  "id": "/subscriptions/df8428d4-bc25-4601-b458-1c8533ceec0b/resourceGroups/my-k8s-cluster-thfalgou",
  "location": "westus2",
  "managedBy": null,
  "name": "my-k8s-cluster-thfalgou",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
'
2018-02-06 09:30:02,176 [MainThread  ] [DEBUG]  Execute command: 'az aks create --resource-group $RESOURCE_GROUP --name $RESOURCE_GROUP --node-count 3 --generate-ssh-keys'
2018-02-06 09:34:47,227 [MainThread  ] [DEBUG]  Response: '[K - Starting ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Running ..[K - Finished ..[K{
  "agentPoolProfiles": [
    {
      "count": 3,
      "dnsPrefix": null,
      "fqdn": null,
      "name": "nodepool1",
      "osDiskSizeGb": null,
      "osType": "Linux",
      "ports": null,
      "storageProfile": "ManagedDisks",
      "vmSize": "Standard_D1_v2",
      "vnetSubnetId": null
    }
  ],
  "dnsPrefix": "my-k8s-clu-my-k8s-cluster-t-df8428",
  "fqdn": "my-k8s-clu-my-k8s-cluster-t-df8428-0ab3150f.hcp.westus2.azmk8s.io",
  "id": "/subscriptions/df8428d4-bc25-4601-b458-1c8533ceec0b/resourcegroups/my-k8s-cluster-thfalgou/providers/Microsoft.ContainerService/managedClusters/my-k8s-cluster-thfalgou",
  "kubernetesVersion": "1.7.7",
  "linuxProfile": {
    "adminUsername": "azureuser",
    "ssh": {
      "publicKeys": [
        {
          "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDjBBKNpQXXdpZn1WQKnoaL/HrWwjgginarHJfdunIrg6mk5A2t5S2I9hDPSEJ5pHdU7nc8vzixEgot4G6PiYrPglenXFl65xr6jhDdIuPSUYmWCwqMjX8XYl9nd9TUmFk0TmrLQrt9fcWOdhpmLpuPqQjiwFDkPBw10oz7foudLXdqkIS/7OtH8bG3rqsQhGgGfumY2CfA1mEPyXWBex9n0FTyoU+kU7CcZEk9H/leA1yRWASDf95ZsQ50kueAgV5puSWD80abwzFZgHRtoSWZ91tunELjaU6ZxAw1po6km74sZRkcPjbgWvg+CXmJv181ZZv7F4B8ynyvqBYO8wKgkvM/LD84LsAUjhdiwxWSbsR1sPjvWETUbzbDBdPG4wp/6auGfpuMJafser7XDCX5ider8Zive7nPJ/ZDcL/UjG9MmTSLdKV6A9B5+vLTOj0AV8MXlprI/HfYmoSsM0K6bPyUdUHcFhCx6ycLTwDS/sM0KpYEAFkIdOWngERbk30xOfemlJYa9Y0fsvsU7nlu943syeyiDTNwFbGB/rO2bcukv6ixk0tlOvc3uFP4bL/S3vLXhmWM9NuLHj4RrknxlZPr5D66Porvg3MD3bRSS5F/PEm8zBXn59TKUdCvKxHXrS/67TGF5PW29m7LBjZP8Ez66CHb4dl+ye9mzpMqkQ== tommy@lastcoolnameleft.com\n"
        }
      ]
    }
  },
  "location": "westus2",
  "name": "my-k8s-cluster-thfalgou",
  "provisioningState": "Succeeded",
  "resourceGroup": "my-k8s-cluster-thfalgou",
  "servicePrincipalProfile": {
    "clientId": "c9b0318d-cbe6-4833-9465-ee47931a3345",
    "keyVaultSecretRef": null,
    "secret": null
  },
  "tags": null,
  "type": "Microsoft.ContainerService/ManagedClusters"
}
'
2018-02-06 09:34:47,229 [MainThread  ] [DEBUG]  Execute command: 'az aks install-cli'
2018-02-06 09:34:59,093 [MainThread  ] [DEBUG]  Response: '[33mDownloading client to /usr/local/bin/kubectl from https://storage.googleapis.com/kubernetes-release/release/v1.9.2/bin/darwin/amd64/kubectl[0m
'
2018-02-06 09:34:59,093 [MainThread  ] [DEBUG]  Execute command: 'az aks get-credentials --resource-group=$RESOURCE_GROUP --name=$RESOURCE_GROUP'
2018-02-06 09:35:00,787 [MainThread  ] [DEBUG]  Response: 'Merged "my-k8s-cluster-thfalgou" as current context in /Users/thfalgou/.kube/config
'
2018-02-06 09:35:00,787 [MainThread  ] [DEBUG]  Execute command: 'kubectl cluster-info'
2018-02-06 09:35:01,420 [MainThread  ] [DEBUG]  Response: '[0;32mKubernetes master[0m is running at [0;33mhttps://my-k8s-clu-my-k8s-cluster-t-df8428-0ab3150f.hcp.westus2.azmk8s.io:443[0m

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
'
2018-02-06 09:35:01,420 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-06 09:35:01,814 [MainThread  ] [DEBUG]  Response: 'No resources found.
'
2018-02-06 09:54:42,032 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-hello-world.md, is_prereq=False
2018-02-06 09:54:42,033 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Hello-world on Kubernetes'})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes Quick Start\n'})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To run a simple app on Kubernetes, we can use: `kubectl run`'})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Let us start by running a simple HTTP server: nginx. Nginix is a popular HTTP server, with a pre-built container on Docker hub. The kubectl run commands below will create two nginx replicas, listening on port 80, and a public IP address for your application.\n'})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl run my-nginx --image=nginx --replicas=2 --port=80']})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The output should look like this\n'})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['deployment "my-nginx" created']})
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,034 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To expose your service to the public internet, use:'})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer']})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The output should look like this\n'})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['service "my-nginx" exposed']})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'You can see that they are running by:'})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes will ensure that your application keeps running, by automatically restarting containers that fail, spreading containers across nodes, and recreating containers on new nodes when nodes fail.\n'})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To find the public IP address assigned to your application'})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get service my-nginx']})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To kill the application and delete its containers and public IP address'})
2018-02-06 09:54:42,035 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete deployment,service my-nginx']})
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,k8s-hello-world.md)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-06 09:54:42,036 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-06 09:54:42,037 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 09:54:43,304 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 09:54:43,305 [MainThread  ] [DEBUG]  process()
2018-02-06 09:54:44,920 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:54:44,920 [MainThread  ] [DEBUG]  deque(['kubectl run my-nginx --image=nginx --replicas=2 --port=80'])
2018-02-06 09:54:44,920 [MainThread  ] [DEBUG]  run_command(kubectl run my-nginx --image=nginx --replicas=2 --port=80)
2018-02-06 09:54:44,920 [MainThread  ] [DEBUG]  Execute command: 'kubectl run my-nginx --image=nginx --replicas=2 --port=80'
2018-02-06 09:54:45,572 [MainThread  ] [DEBUG]  Response: 'deployment "my-nginx" created
'
2018-02-06 09:54:45,572 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl run my-nginx --image=nginx --replicas=2 --port=80']}
2018-02-06 09:55:12,002 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:12,005 [MainThread  ] [DEBUG]  deque(['deployment "my-nginx" created'])
2018-02-06 09:55:12,005 [MainThread  ] [DEBUG]  run_command(deployment "my-nginx" created)
2018-02-06 09:55:12,005 [MainThread  ] [DEBUG]  Execute command: 'deployment "my-nginx" created'
2018-02-06 09:55:12,069 [MainThread  ] [DEBUG]  Response: 'bash: deployment: command not found
'
2018-02-06 09:55:12,070 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['deployment "my-nginx" created']}
2018-02-06 09:55:12,783 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:12,783 [MainThread  ] [DEBUG]  deque(['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'])
2018-02-06 09:55:12,784 [MainThread  ] [DEBUG]  run_command(kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer)
2018-02-06 09:55:12,784 [MainThread  ] [DEBUG]  Execute command: 'kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'
2018-02-06 09:55:13,473 [MainThread  ] [DEBUG]  Response: 'service "my-nginx" exposed
'
2018-02-06 09:55:13,473 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer']}
2018-02-06 09:55:13,473 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:13,473 [MainThread  ] [DEBUG]  deque(['service "my-nginx" exposed'])
2018-02-06 09:55:13,473 [MainThread  ] [DEBUG]  run_command(service "my-nginx" exposed)
2018-02-06 09:55:13,473 [MainThread  ] [DEBUG]  Execute command: 'service "my-nginx" exposed'
2018-02-06 09:55:13,530 [MainThread  ] [DEBUG]  Response: 'bash: service: command not found
'
2018-02-06 09:55:13,530 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['service "my-nginx" exposed']}
2018-02-06 09:55:13,531 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:13,531 [MainThread  ] [DEBUG]  deque(['kubectl get service my-nginx'])
2018-02-06 09:55:13,531 [MainThread  ] [DEBUG]  run_command(kubectl get service my-nginx)
2018-02-06 09:55:13,531 [MainThread  ] [DEBUG]  Execute command: 'kubectl get service my-nginx'
2018-02-06 09:55:13,872 [MainThread  ] [DEBUG]  Response: 'NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   0s
'
2018-02-06 09:55:13,872 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get service my-nginx'], 'expected_result': 'NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE\nmy-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s\n'}
2018-02-06 09:55:13,873 [MainThread  ] [DEBUG]  is_result_valid(NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE
my-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s
,NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   0s
,1.0)
2018-02-06 09:55:13,873 [MainThread  ] [DEBUG]  is_result_valid(NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE
my-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s,NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   0s,1.0)
2018-02-06 09:55:13,874 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 09:55:13,874 [MainThread  ] [ERROR]  actual_results = NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   0s

2018-02-06 09:55:13,874 [MainThread  ] [ERROR]  expected_results = NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE
my-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s

2018-02-06 09:55:14,107 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:14,108 [MainThread  ] [DEBUG]  deque(['kubectl delete deployment,service my-nginx'])
2018-02-06 09:55:14,108 [MainThread  ] [DEBUG]  run_command(kubectl delete deployment,service my-nginx)
2018-02-06 09:55:14,108 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete deployment,service my-nginx'
2018-02-06 09:55:16,596 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-hello-world.md, is_prereq=False
2018-02-06 09:55:16,596 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 09:55:16,597 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 09:55:16,597 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:55:16,597 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Hello-world on Kubernetes'})
2018-02-06 09:55:16,597 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes Quick Start\n'})
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To run a simple app on Kubernetes, we can use: `kubectl run`'})
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Let us start by running a simple HTTP server: nginx. Nginix is a popular HTTP server, with a pre-built container on Docker hub. The kubectl run commands below will create two nginx replicas, listening on port 80, and a public IP address for your application.\n'})
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl run my-nginx --image=nginx --replicas=2 --port=80']})
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To expose your service to the public internet, use:'})
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer']})
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,598 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'You can see that they are running by:'})
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes will ensure that your application keeps running, by automatically restarting containers that fail, spreading containers across nodes, and recreating containers on new nodes when nodes fail.\n'})
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To find the public IP address assigned to your application'})
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get service my-nginx']})
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To kill the application and delete its containers and public IP address'})
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete deployment,service my-nginx']})
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-06 09:55:16,599 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,k8s-hello-world.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-06 09:55:16,600 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 09:55:17,818 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 09:55:17,818 [MainThread  ] [DEBUG]  process()
2018-02-06 09:55:18,838 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:18,838 [MainThread  ] [DEBUG]  deque(['kubectl run my-nginx --image=nginx --replicas=2 --port=80'])
2018-02-06 09:55:18,838 [MainThread  ] [DEBUG]  run_command(kubectl run my-nginx --image=nginx --replicas=2 --port=80)
2018-02-06 09:55:18,838 [MainThread  ] [DEBUG]  Execute command: 'kubectl run my-nginx --image=nginx --replicas=2 --port=80'
2018-02-06 09:55:19,154 [MainThread  ] [DEBUG]  Response: 'Error from server (AlreadyExists): deployments.extensions "my-nginx" already exists
'
2018-02-06 09:55:19,154 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl run my-nginx --image=nginx --replicas=2 --port=80'], 'expected_result': 'deployment "my-nginx" created\n'}
2018-02-06 09:55:19,155 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" created
,Error from server (AlreadyExists): deployments.extensions "my-nginx" already exists
,1.0)
2018-02-06 09:55:19,155 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" created,Error from server (AlreadyExists): deployments.extensions "my-nginx" already exists,1.0)
2018-02-06 09:55:19,155 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 09:55:19,155 [MainThread  ] [ERROR]  actual_results = Error from server (AlreadyExists): deployments.extensions "my-nginx" already exists

2018-02-06 09:55:19,155 [MainThread  ] [ERROR]  expected_results = deployment "my-nginx" created

2018-02-06 09:55:25,597 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:25,606 [MainThread  ] [DEBUG]  deque(['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'])
2018-02-06 09:55:25,606 [MainThread  ] [DEBUG]  run_command(kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer)
2018-02-06 09:55:25,606 [MainThread  ] [DEBUG]  Execute command: 'kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'
2018-02-06 09:55:25,967 [MainThread  ] [DEBUG]  Response: 'Error from server (AlreadyExists): services "my-nginx" already exists
'
2018-02-06 09:55:25,968 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'], 'expected_result': 'service "my-nginx" exposed\n'}
2018-02-06 09:55:25,968 [MainThread  ] [DEBUG]  is_result_valid(service "my-nginx" exposed
,Error from server (AlreadyExists): services "my-nginx" already exists
,1.0)
2018-02-06 09:55:25,968 [MainThread  ] [DEBUG]  is_result_valid(service "my-nginx" exposed,Error from server (AlreadyExists): services "my-nginx" already exists,1.0)
2018-02-06 09:55:25,968 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 09:55:25,968 [MainThread  ] [ERROR]  actual_results = Error from server (AlreadyExists): services "my-nginx" already exists

2018-02-06 09:55:25,968 [MainThread  ] [ERROR]  expected_results = service "my-nginx" exposed

2018-02-06 09:55:29,973 [MainThread  ] [DEBUG]  Output=None
2018-02-06 09:55:29,973 [MainThread  ] [DEBUG]  deque(['kubectl get service my-nginx'])
2018-02-06 09:55:29,973 [MainThread  ] [DEBUG]  run_command(kubectl get service my-nginx)
2018-02-06 09:55:29,973 [MainThread  ] [DEBUG]  Execute command: 'kubectl get service my-nginx'
2018-02-06 09:55:30,335 [MainThread  ] [DEBUG]  Response: 'NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s
'
2018-02-06 09:55:30,335 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get service my-nginx'], 'expected_result': 'NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE\nmy-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s\n'}
2018-02-06 09:55:30,335 [MainThread  ] [DEBUG]  is_result_valid(NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE
my-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s
,NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s
,1.0)
2018-02-06 09:55:30,336 [MainThread  ] [DEBUG]  is_result_valid(NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE
my-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s,NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s,1.0)
2018-02-06 09:55:30,336 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 09:55:30,336 [MainThread  ] [ERROR]  actual_results = NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s

2018-02-06 09:55:30,336 [MainThread  ] [ERROR]  expected_results = NAME         CLUSTER_IP       EXTERNAL_IP       PORT(S)                AGE
my-nginx     10.179.240.1     25.1.2.3          80/TCP                 8s

2018-02-06 11:25:05,974 [MainThread  ] [DEBUG]  Output=None
2018-02-06 11:25:05,981 [MainThread  ] [DEBUG]  deque(['kubectl delete deployment,service my-nginx'])
2018-02-06 11:25:05,981 [MainThread  ] [DEBUG]  run_command(kubectl delete deployment,service my-nginx)
2018-02-06 11:25:05,981 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete deployment,service my-nginx'
2018-02-06 11:25:10,229 [MainThread  ] [DEBUG]  Response: 'deployment "my-nginx" deleted
service "my-nginx" deleted
'
2018-02-06 11:25:10,229 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl delete deployment,service my-nginx'], 'expected_result': 'deployment "my-nginx" deleted\nservice "my-nginx" deleted\n'}
2018-02-06 11:25:10,229 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" deleted
service "my-nginx" deleted
,deployment "my-nginx" deleted
service "my-nginx" deleted
,1.0)
2018-02-06 11:25:10,229 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" deleted
service "my-nginx" deleted,deployment "my-nginx" deleted
service "my-nginx" deleted,1.0)
2018-02-06 11:25:10,230 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 11:25:24,736 [MainThread  ] [DEBUG]  parse_file(file_path=/Users/thfalgou/git/workshops/kubernetes/k8s-hello-world.md, is_prereq=False
2018-02-06 11:25:24,736 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 11:25:24,745 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 11:25:24,745 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 11:25:24,745 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Hello-world on Kubernetes'})
2018-02-06 11:25:24,745 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 11:25:24,745 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes Quick Start\n'})
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To run a simple app on Kubernetes, we can use: `kubectl run`'})
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Let us start by running a simple HTTP server: nginx. Nginix is a popular HTTP server, with a pre-built container on Docker hub. The kubectl run commands below will create two nginx replicas, listening on port 80, and a public IP address for your application.\n'})
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl run my-nginx --image=nginx --replicas=2 --port=80']})
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To expose your service to the public internet, use:'})
2018-02-06 11:25:24,746 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer']})
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'You can see that they are running by:'})
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes will ensure that your application keeps running, by automatically restarting containers that fail, spreading containers across nodes, and recreating containers on new nodes when nodes fail.\n'})
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To find the public IP address assigned to your application'})
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get service my-nginx']})
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,747 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'To kill the application and delete its containers and public IP address'})
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete deployment,service my-nginx']})
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Next Steps'})
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  set_section(next_steps)
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  append_next_step(Lab Overview,README.md)
2018-02-06 11:25:24,748 [MainThread  ] [DEBUG]  append_next_step(Create AKS Cluster,create-aks-cluster.md)
2018-02-06 11:25:24,749 [MainThread  ] [DEBUG]  append_next_step(Hello-world on Kubernetes,k8s-hello-world.md)
2018-02-06 11:25:24,749 [MainThread  ] [DEBUG]  append_next_step(Experimenting with Kubernetes Features,./step03.md)
2018-02-06 11:25:24,749 [MainThread  ] [DEBUG]  append_next_step(Deploying a Pod and Service from a public repository,./step04.md)
2018-02-06 11:25:24,749 [MainThread  ] [DEBUG]  append_next_step(Create Azure Container Service Repository (ACR),./step05.md)
2018-02-06 11:25:24,749 [MainThread  ] [DEBUG]  append_next_step(Enable OMS monitoring of containers,./step06.md)
2018-02-06 11:25:24,749 [MainThread  ] [DEBUG]  append_next_step(Create and deploy into Kubernetes Namspaces,./step07.md)
2018-02-06 11:25:24,749 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 11:25:24,802 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 11:25:24,802 [MainThread  ] [DEBUG]  process()
2018-02-06 11:25:26,023 [MainThread  ] [DEBUG]  Output=None
2018-02-06 11:25:26,024 [MainThread  ] [DEBUG]  deque(['kubectl run my-nginx --image=nginx --replicas=2 --port=80'])
2018-02-06 11:25:26,024 [MainThread  ] [DEBUG]  run_command(kubectl run my-nginx --image=nginx --replicas=2 --port=80)
2018-02-06 11:25:26,024 [MainThread  ] [DEBUG]  Execute command: 'kubectl run my-nginx --image=nginx --replicas=2 --port=80'
2018-02-06 11:25:26,562 [MainThread  ] [DEBUG]  Response: 'deployment "my-nginx" created
'
2018-02-06 11:25:26,562 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl run my-nginx --image=nginx --replicas=2 --port=80'], 'expected_result': 'deployment "my-nginx" created\n'}
2018-02-06 11:25:26,562 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" created
,deployment "my-nginx" created
,1.0)
2018-02-06 11:25:26,562 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" created,deployment "my-nginx" created,1.0)
2018-02-06 11:25:26,562 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 11:25:31,361 [MainThread  ] [DEBUG]  Output=None
2018-02-06 11:25:31,361 [MainThread  ] [DEBUG]  deque(['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'])
2018-02-06 11:25:31,362 [MainThread  ] [DEBUG]  run_command(kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer)
2018-02-06 11:25:31,362 [MainThread  ] [DEBUG]  Execute command: 'kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'
2018-02-06 11:25:31,797 [MainThread  ] [DEBUG]  Response: 'service "my-nginx" exposed
'
2018-02-06 11:25:31,798 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl expose deployment my-nginx --target-port=80 --type=LoadBalancer'], 'expected_result': 'service "my-nginx" exposed\n'}
2018-02-06 11:25:31,798 [MainThread  ] [DEBUG]  is_result_valid(service "my-nginx" exposed
,service "my-nginx" exposed
,1.0)
2018-02-06 11:25:31,798 [MainThread  ] [DEBUG]  is_result_valid(service "my-nginx" exposed,service "my-nginx" exposed,1.0)
2018-02-06 11:25:31,798 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 11:25:35,658 [MainThread  ] [DEBUG]  Output=None
2018-02-06 11:25:35,658 [MainThread  ] [DEBUG]  deque(['kubectl get service my-nginx'])
2018-02-06 11:25:35,658 [MainThread  ] [DEBUG]  run_command(kubectl get service my-nginx)
2018-02-06 11:25:35,658 [MainThread  ] [DEBUG]  Execute command: 'kubectl get service my-nginx'
2018-02-06 11:25:36,115 [MainThread  ] [DEBUG]  Response: 'NAME       TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.209.207   <pending>     80:30224/TCP   5s
'
2018-02-06 11:25:36,115 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get service my-nginx'], 'expected_result': 'NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE\nmy-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s\n'}
2018-02-06 11:25:36,115 [MainThread  ] [DEBUG]  is_result_valid(NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s
,NAME       TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.209.207   <pending>     80:30224/TCP   5s
,1.0)
2018-02-06 11:25:36,115 [MainThread  ] [DEBUG]  is_result_valid(NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s,NAME       TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.209.207   <pending>     80:30224/TCP   5s,1.0)
2018-02-06 11:25:36,116 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 11:25:36,116 [MainThread  ] [ERROR]  actual_results = NAME       TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.209.207   <pending>     80:30224/TCP   5s

2018-02-06 11:25:36,116 [MainThread  ] [ERROR]  expected_results = NAME       TYPE           CLUSTER-IP   EXTERNAL-IP   PORT(S)        AGE
my-nginx   LoadBalancer   10.0.13.23   <pending>     80:30872/TCP   17s

2018-02-06 11:25:50,339 [MainThread  ] [DEBUG]  Output=None
2018-02-06 11:25:50,339 [MainThread  ] [DEBUG]  deque(['kubectl delete deployment,service my-nginx'])
2018-02-06 11:25:50,339 [MainThread  ] [DEBUG]  run_command(kubectl delete deployment,service my-nginx)
2018-02-06 11:25:50,339 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete deployment,service my-nginx'
2018-02-06 11:25:54,263 [MainThread  ] [DEBUG]  Response: 'deployment "my-nginx" deleted
service "my-nginx" deleted
'
2018-02-06 11:25:54,263 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl delete deployment,service my-nginx'], 'expected_result': 'deployment "my-nginx" deleted\nservice "my-nginx" deleted\n'}
2018-02-06 11:25:54,263 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" deleted
service "my-nginx" deleted
,deployment "my-nginx" deleted
service "my-nginx" deleted
,1.0)
2018-02-06 11:25:54,263 [MainThread  ] [DEBUG]  is_result_valid(deployment "my-nginx" deleted
service "my-nginx" deleted,deployment "my-nginx" deleted
service "my-nginx" deleted,1.0)
2018-02-06 11:25:54,264 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 13:59:04,559 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 13:59:04,560 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 13:59:04,562 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 13:59:04,562 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,562 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 13:59:04,562 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,562 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates. \n'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.   \n'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node. \n'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows:'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['apiVersion: v1', 'kind: Pod', 'metadata:', '  name: hello-world', "spec:  # specification of the pod's contents", '  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]']})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,563 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The results should look like this\n'})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['pod "hello-world" created']})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The results should look like this\n'})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NAME          READY     STATUS      RESTARTS   AGE', 'hello-world   0/1       Completed   0          1m']})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Terminated pods aren’t currently automatically deleted, so you will need to delete them manually using'})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world']})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'The results should look like this\n'})
2018-02-06 13:59:04,564 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['pod "hello-world" deleted']})
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['apiVersion: v1', 'kind: Pod', 'metadata:', '  name: redis-nginx', '  labels:', '    app: web', 'spec:', '  containers:', '    - name: key-value-store', '      image: redis', '      ports:', '        - containerPort: 6379', '    - name: frontend', '      image: nginx', '      ports:', '        - containerPort: 8000']})
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 13:59:04,565 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd']})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 13:59:04,566 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['apiVersion: v1', 'kind: Pod', 'metadata:', '  name: nginx2', '  labels:', '    env: test', 'spec:', '  containers:', '  - name: nginx', '    image: nginx', '    imagePullPolicy: IfNotPresent', '  nodeSelector:', '    disktype: ssd']})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 13:59:04,567 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['apiVersion: apps/v1beta1', 'kind: Deployment', 'metadata:', '  name: nginx-deployment', 'spec:', '  replicas: 2 # tells deployment to run 2 pods matching the template', '  template: # create pods using pod definition in this template', '    metadata:', '      # unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is', '      # generated from the deployment name', '      labels:', '        app: nginx', '    spec:', '      containers:', '      - name: nginx', '        image: nginx:1.7.9', '        ports:', '        - containerPort: 80']})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,568 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 13:59:04,569 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['cat deployment-nginx-update.yaml', 'apiVersion: apps/v1beta1', 'kind: Deployment', 'metadata:', '  name: nginx-deployment', 'spec:', '  replicas: 2', '  template:', '    metadata:', '      labels:', '        app: nginx', '    spec:', '      containers:', '      - name: nginx', '        image: nginx:1.8 # Update the version of nginx from 1.7.9 to 1.8', '        ports:', '        - containerPort: 80']})
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In another window, you can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old'})
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx']})
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 13:59:04,570 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get rs -l app=nginx']})
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 13:59:04,571 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 13:59:05,882 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 13:59:05,882 [MainThread  ] [DEBUG]  process()
2018-02-06 13:59:08,355 [MainThread  ] [DEBUG]  Output=None
2018-02-06 13:59:08,356 [MainThread  ] [DEBUG]  deque(['apiVersion: v1', 'kind: Pod', 'metadata:', '  name: hello-world', "spec:  # specification of the pod's contents", '  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 13:59:08,356 [MainThread  ] [DEBUG]  run_command(apiVersion: v1)
2018-02-06 13:59:08,356 [MainThread  ] [DEBUG]  Execute command: 'apiVersion: v1'
2018-02-06 13:59:08,425 [MainThread  ] [DEBUG]  Response: 'bash: apiVersion:: command not found
'
2018-02-06 14:01:52,385 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:52,386 [MainThread  ] [DEBUG]  deque(['kind: Pod', 'metadata:', '  name: hello-world', "spec:  # specification of the pod's contents", '  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:52,386 [MainThread  ] [DEBUG]  run_command(kind: Pod)
2018-02-06 14:01:52,386 [MainThread  ] [DEBUG]  Execute command: 'kind: Pod'
2018-02-06 14:01:52,444 [MainThread  ] [DEBUG]  Response: 'bash: kind:: command not found
'
2018-02-06 14:01:52,585 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:52,585 [MainThread  ] [DEBUG]  deque(['metadata:', '  name: hello-world', "spec:  # specification of the pod's contents", '  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:52,585 [MainThread  ] [DEBUG]  run_command(metadata:)
2018-02-06 14:01:52,585 [MainThread  ] [DEBUG]  Execute command: 'metadata:'
2018-02-06 14:01:52,650 [MainThread  ] [DEBUG]  Response: 'bash: metadata:: command not found
'
2018-02-06 14:01:52,733 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:52,733 [MainThread  ] [DEBUG]  deque(['  name: hello-world', "spec:  # specification of the pod's contents", '  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:52,733 [MainThread  ] [DEBUG]  run_command(  name: hello-world)
2018-02-06 14:01:52,734 [MainThread  ] [DEBUG]  Execute command: 'name: hello-world'
2018-02-06 14:01:52,794 [MainThread  ] [DEBUG]  Response: 'bash: name:: command not found
'
2018-02-06 14:01:52,874 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:52,874 [MainThread  ] [DEBUG]  deque(["spec:  # specification of the pod's contents", '  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:52,875 [MainThread  ] [DEBUG]  run_command(spec:  # specification of the pod's contents)
2018-02-06 14:01:52,875 [MainThread  ] [DEBUG]  Execute command: 'spec:  # specification of the pod's contents'
2018-02-06 14:01:52,933 [MainThread  ] [DEBUG]  Response: 'bash: spec:: command not found
'
2018-02-06 14:01:53,045 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:53,045 [MainThread  ] [DEBUG]  deque(['  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:53,045 [MainThread  ] [DEBUG]  run_command(  restartPolicy: Never)
2018-02-06 14:01:53,045 [MainThread  ] [DEBUG]  Execute command: 'restartPolicy: Never'
2018-02-06 14:01:53,103 [MainThread  ] [DEBUG]  Response: 'bash: restartPolicy:: command not found
'
2018-02-06 14:01:53,277 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:53,277 [MainThread  ] [DEBUG]  deque(['  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:53,277 [MainThread  ] [DEBUG]  run_command(  containers:)
2018-02-06 14:01:53,277 [MainThread  ] [DEBUG]  Execute command: 'containers:'
2018-02-06 14:01:53,335 [MainThread  ] [DEBUG]  Response: 'bash: containers:: command not found
'
2018-02-06 14:01:53,433 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:53,433 [MainThread  ] [DEBUG]  deque(['  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:53,433 [MainThread  ] [DEBUG]  run_command(  - name: hello)
2018-02-06 14:01:53,433 [MainThread  ] [DEBUG]  Execute command: '- name: hello'
2018-02-06 14:01:53,490 [MainThread  ] [DEBUG]  Response: 'bash: -: command not found
'
2018-02-06 14:01:53,934 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:53,935 [MainThread  ] [DEBUG]  deque(['    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:53,935 [MainThread  ] [DEBUG]  run_command(    image: "ubuntu:14.04")
2018-02-06 14:01:53,935 [MainThread  ] [DEBUG]  Execute command: 'image: "ubuntu:14.04"'
2018-02-06 14:01:53,992 [MainThread  ] [DEBUG]  Response: 'bash: image:: command not found
'
2018-02-06 14:01:54,018 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:54,018 [MainThread  ] [DEBUG]  deque(['    command: ["/bin/echo", "hello", "world"]'])
2018-02-06 14:01:54,018 [MainThread  ] [DEBUG]  run_command(    command: ["/bin/echo", "hello", "world"])
2018-02-06 14:01:54,018 [MainThread  ] [DEBUG]  Execute command: 'command: ["/bin/echo", "hello", "world"]'
2018-02-06 14:01:54,072 [MainThread  ] [DEBUG]  Response: 'bash: command:: command not found
'
2018-02-06 14:01:54,073 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['apiVersion: v1', 'kind: Pod', 'metadata:', '  name: hello-world', "spec:  # specification of the pod's contents", '  restartPolicy: Never', '  containers:', '  - name: hello', '    image: "ubuntu:14.04"', '    command: ["/bin/echo", "hello", "world"]']}
2018-02-06 14:01:54,102 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:54,102 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:01:54,102 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:01:54,102 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:01:56,405 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:01:56,405 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:01:56,407 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:01:56,407 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,407 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:01:56,407 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,407 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates. \n'})
2018-02-06 14:01:56,407 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.   \n'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node. \n'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows:'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:01:56,408 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Terminated pods aren’t currently automatically deleted, so you will need to delete them manually using'})
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world']})
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,409 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:01:56,410 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd']})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:01:56,411 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:01:56,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,414 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In another window, you can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old'})
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx']})
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get rs -l app=nginx']})
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:01:56,415 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:01:56,416 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:01:56,416 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:01:56,416 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:01:56,416 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:01:57,607 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:01:57,608 [MainThread  ] [DEBUG]  process()
2018-02-06 14:01:59,507 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:01:59,507 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:01:59,507 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:01:59,507 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:02:00,359 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" created
'
2018-02-06 14:02:00,359 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:02:00,360 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" created
,1.0)
2018-02-06 14:02:00,360 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" created,1.0)
2018-02-06 14:02:00,360 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:02:07,752 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:02:07,752 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:02:07,753 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:02:07,753 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:02:08,218 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
'
2018-02-06 14:02:08,218 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS      RESTARTS   AGE\nhello-world   0/1       Completed   0          1m\n'}
2018-02-06 14:02:08,218 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          1m
,NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,1.0)
2018-02-06 14:02:08,219 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          1m,NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,1.0)
2018-02-06 14:02:08,219 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:02:08,219 [MainThread  ] [ERROR]  actual_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:02:08,219 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          1m

2018-02-06 14:02:51,049 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:02:51,049 [MainThread  ] [DEBUG]  deque(['kubectl delete pod hello-world'])
2018-02-06 14:02:51,049 [MainThread  ] [DEBUG]  run_command(kubectl delete pod hello-world)
2018-02-06 14:02:51,050 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete pod hello-world'
2018-02-06 14:02:53,010 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:02:53,010 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:02:53,011 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:02:53,011 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,011 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:02:53,011 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,011 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates. \n'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.   \n'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node. \n'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows:'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,012 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Terminated pods aren’t currently automatically deleted, so you will need to delete them manually using'})
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world']})
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:02:53,013 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:02:53,014 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,014 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:02:53,014 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,014 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:02:53,014 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:02:53,014 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:02:53,014 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd']})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,015 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,016 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:02:53,017 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In another window, you can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old'})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx']})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get rs -l app=nginx']})
2018-02-06 14:02:53,018 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:02:53,019 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:02:54,301 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:02:54,301 [MainThread  ] [DEBUG]  process()
2018-02-06 14:02:54,993 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:02:54,993 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:02:54,993 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:02:54,993 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:02:55,749 [MainThread  ] [DEBUG]  Response: 'Error from server (AlreadyExists): error when creating "https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml": pods "hello-world" already exists
'
2018-02-06 14:02:55,749 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:02:55,750 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,Error from server (AlreadyExists): error when creating "https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml": pods "hello-world" already exists
,1.0)
2018-02-06 14:02:55,750 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,Error from server (AlreadyExists): error when creating "https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml": pods "hello-world" already exists,1.0)
2018-02-06 14:02:55,750 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:02:55,750 [MainThread  ] [ERROR]  actual_results = Error from server (AlreadyExists): error when creating "https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml": pods "hello-world" already exists

2018-02-06 14:02:55,750 [MainThread  ] [ERROR]  expected_results = pod "hello-world" created

2018-02-06 14:02:58,035 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:02:58,035 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:02:58,035 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:02:58,035 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:02:58,369 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          58s
'
2018-02-06 14:02:58,369 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS              RESTARTS   AGE\nhello-world   0/1       ContainerCreating   0          8s\n'}
2018-02-06 14:02:58,369 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          58s
,1.0)
2018-02-06 14:02:58,369 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          58s,1.0)
2018-02-06 14:02:58,370 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:02:58,370 [MainThread  ] [ERROR]  actual_results = NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          58s

2018-02-06 14:02:58,370 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:02:59,514 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:02:59,514 [MainThread  ] [DEBUG]  deque(['kubectl delete pod hello-world'])
2018-02-06 14:02:59,514 [MainThread  ] [DEBUG]  run_command(kubectl delete pod hello-world)
2018-02-06 14:02:59,515 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete pod hello-world'
2018-02-06 14:02:59,956 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" deleted
'
2018-02-06 14:02:59,956 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl delete pod hello-world'], 'expected_result': 'pod "hello-world" deleted\n'}
2018-02-06 14:02:59,956 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" deleted
,pod "hello-world" deleted
,1.0)
2018-02-06 14:02:59,956 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" deleted,pod "hello-world" deleted,1.0)
2018-02-06 14:02:59,957 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:03:24,354 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:24,355 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'])
2018-02-06 14:03:24,355 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml)
2018-02-06 14:03:24,355 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:03:24,950 [MainThread  ] [DEBUG]  Response: 'pod "redis-nginx" created
'
2018-02-06 14:03:24,950 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']}
2018-02-06 14:03:24,950 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:24,950 [MainThread  ] [DEBUG]  deque(['kubectl get nodes'])
2018-02-06 14:03:24,951 [MainThread  ] [DEBUG]  run_command(kubectl get nodes)
2018-02-06 14:03:24,951 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-06 14:03:25,354 [MainThread  ] [DEBUG]  Response: 'NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-39797000-0   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-1   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-2   Ready     agent     4h        v1.7.7
'
2018-02-06 14:03:25,355 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get nodes']}
2018-02-06 14:03:25,355 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:25,355 [MainThread  ] [DEBUG]  deque(['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd'])
2018-02-06 14:03:25,355 [MainThread  ] [DEBUG]  run_command(kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd)
2018-02-06 14:03:25,355 [MainThread  ] [DEBUG]  Execute command: 'kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd'
2018-02-06 14:03:25,633 [MainThread  ] [DEBUG]  Response: 'Error from server (NotFound): nodes "kubernetes-foo-node-1.c.a" not found
'
2018-02-06 14:03:25,633 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd']}
2018-02-06 14:03:25,634 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:25,634 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'])
2018-02-06 14:03:25,634 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml)
2018-02-06 14:03:25,634 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:03:26,240 [MainThread  ] [DEBUG]  Response: 'pod "nginx2" created
'
2018-02-06 14:03:26,240 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']}
2018-02-06 14:03:26,240 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:26,241 [MainThread  ] [DEBUG]  deque(['kubectl describe pod/nginx2'])
2018-02-06 14:03:26,241 [MainThread  ] [DEBUG]  run_command(kubectl describe pod/nginx2)
2018-02-06 14:03:26,241 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe pod/nginx2'
2018-02-06 14:03:26,565 [MainThread  ] [DEBUG]  Response: 'Name:         nginx2
Namespace:    default
Node:         <none>
Labels:       env=test
Annotations:  <none>
Status:       Pending
IP:           
Containers:
  nginx:
    Image:        nginx
    Port:         <none>
    Environment:  <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-wkpq4 (ro)
Conditions:
  Type           Status
  PodScheduled   False 
Volumes:
  default-token-wkpq4:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-wkpq4
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  disktype=ssd
Tolerations:     node.alpha.kubernetes.io/notReady:NoExecute for 300s
                 node.alpha.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type     Reason            Age              From               Message
  ----     ------            ----             ----               -------
  Warning  FailedScheduling  0s (x2 over 0s)  default-scheduler  No nodes are available that match all of the following predicates:: MatchNodeSelector (3).
'
2018-02-06 14:03:26,566 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl describe pod/nginx2']}
2018-02-06 14:03:26,566 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:26,567 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'])
2018-02-06 14:03:26,567 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml)
2018-02-06 14:03:26,567 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'
2018-02-06 14:03:27,251 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" created
'
2018-02-06 14:03:27,251 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'], 'expected_result': 'deployment "nginx-deployment" created\n'}
2018-02-06 14:03:27,252 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created
,deployment "nginx-deployment" created
,1.0)
2018-02-06 14:03:27,252 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created,deployment "nginx-deployment" created,1.0)
2018-02-06 14:03:27,252 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:03:27,252 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:27,252 [MainThread  ] [DEBUG]  deque(['kubectl describe deployment nginx-deployment'])
2018-02-06 14:03:27,252 [MainThread  ] [DEBUG]  run_command(kubectl describe deployment nginx-deployment)
2018-02-06 14:03:27,252 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe deployment nginx-deployment'
2018-02-06 14:03:27,580 [MainThread  ] [DEBUG]  Response: 'Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:03:27 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 0 available | 2 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      False   MinimumReplicasUnavailable
  Progressing    True    ReplicaSetUpdated
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  0s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2
'
2018-02-06 14:03:27,580 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment'], 'expected_result': '➜  hello-world kubectl describe deployment nginx-deployment\nName:            nginx-deployment\nNamespace:        default\nCreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500\nLabels:            app=nginx\nAnnotations:        deployment.kubernetes.io/revision=1\nSelector:        app=nginx\nReplicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable\nStrategyType:        RollingUpdate\nMinReadySeconds:    0\nRollingUpdateStrategy:    25% max unavailable, 25% max surge\nPod Template:\n  Labels:    app=nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.7.9\n    Port:        80/TCP\n    Environment:    <none>\n    Mounts:        <none>\n  Volumes:        <none>\nConditions:\n  Type        Status    Reason\n  ----        ------    ------\n  Available     True    MinimumReplicasAvailable\n  Progressing     True    NewReplicaSetAvailable\nOldReplicaSets:    <none>\nNewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)\nEvents:\n  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message\n  ---------    --------    -----    ----            -------------    --------    ------            -------\n  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2\n'}
2018-02-06 14:03:27,580 [MainThread  ] [DEBUG]  is_result_valid(➜  hello-world kubectl describe deployment nginx-deployment
Name:            nginx-deployment
Namespace:        default
CreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500
Labels:            app=nginx
Annotations:        deployment.kubernetes.io/revision=1
Selector:        app=nginx
Replicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:        RollingUpdate
MinReadySeconds:    0
RollingUpdateStrategy:    25% max unavailable, 25% max surge
Pod Template:
  Labels:    app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:        80/TCP
    Environment:    <none>
    Mounts:        <none>
  Volumes:        <none>
Conditions:
  Type        Status    Reason
  ----        ------    ------
  Available     True    MinimumReplicasAvailable
  Progressing     True    NewReplicaSetAvailable
OldReplicaSets:    <none>
NewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)
Events:
  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message
  ---------    --------    -----    ----            -------------    --------    ------            -------
  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2
,Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:03:27 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 0 available | 2 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      False   MinimumReplicasUnavailable
  Progressing    True    ReplicaSetUpdated
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  0s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2
,1.0)
2018-02-06 14:03:27,580 [MainThread  ] [DEBUG]  is_result_valid(➜  hello-world kubectl describe deployment nginx-deployment
Name:            nginx-deployment
Namespace:        default
CreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500
Labels:            app=nginx
Annotations:        deployment.kubernetes.io/revision=1
Selector:        app=nginx
Replicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:        RollingUpdate
MinReadySeconds:    0
RollingUpdateStrategy:    25% max unavailable, 25% max surge
Pod Template:
  Labels:    app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:        80/TCP
    Environment:    <none>
    Mounts:        <none>
  Volumes:        <none>
Conditions:
  Type        Status    Reason
  ----        ------    ------
  Available     True    MinimumReplicasAvailable
  Progressing     True    NewReplicaSetAvailable
OldReplicaSets:    <none>
NewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)
Events:
  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message
  ---------    --------    -----    ----            -------------    --------    ------            -------
  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2,Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:03:27 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 0 available | 2 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      False   MinimumReplicasUnavailable
  Progressing    True    ReplicaSetUpdated
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  0s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2,1.0)
2018-02-06 14:03:27,586 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:03:27,586 [MainThread  ] [ERROR]  actual_results = Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:03:27 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 0 available | 2 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      False   MinimumReplicasUnavailable
  Progressing    True    ReplicaSetUpdated
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  0s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2

2018-02-06 14:03:27,587 [MainThread  ] [ERROR]  expected_results = ➜  hello-world kubectl describe deployment nginx-deployment
Name:            nginx-deployment
Namespace:        default
CreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500
Labels:            app=nginx
Annotations:        deployment.kubernetes.io/revision=1
Selector:        app=nginx
Replicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:        RollingUpdate
MinReadySeconds:    0
RollingUpdateStrategy:    25% max unavailable, 25% max surge
Pod Template:
  Labels:    app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:        80/TCP
    Environment:    <none>
    Mounts:        <none>
  Volumes:        <none>
Conditions:
  Type        Status    Reason
  ----        ------    ------
  Available     True    MinimumReplicasAvailable
  Progressing     True    NewReplicaSetAvailable
OldReplicaSets:    <none>
NewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)
Events:
  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message
  ---------    --------    -----    ----            -------------    --------    ------            -------
  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2

2018-02-06 14:03:27,587 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:27,587 [MainThread  ] [DEBUG]  deque(['kubectl scale --replicas=5 deployment/nginx-deployment'])
2018-02-06 14:03:27,587 [MainThread  ] [DEBUG]  run_command(kubectl scale --replicas=5 deployment/nginx-deployment)
2018-02-06 14:03:27,587 [MainThread  ] [DEBUG]  Execute command: 'kubectl scale --replicas=5 deployment/nginx-deployment'
2018-02-06 14:03:28,921 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" scaled
'
2018-02-06 14:03:28,922 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']}
2018-02-06 14:03:28,922 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:28,922 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'])
2018-02-06 14:03:28,922 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml)
2018-02-06 14:03:28,922 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'
2018-02-06 14:03:29,502 [MainThread  ] [DEBUG]  Response: 'Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
deployment "nginx-deployment" configured
'
2018-02-06 14:03:29,502 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'], 'expected_result': 'Created my-nginx-ccba8fbd8cc8160970f63f9a2696fc46\n'}
2018-02-06 14:03:29,502 [MainThread  ] [DEBUG]  is_result_valid(Created my-nginx-ccba8fbd8cc8160970f63f9a2696fc46
,Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
deployment "nginx-deployment" configured
,1.0)
2018-02-06 14:03:29,502 [MainThread  ] [DEBUG]  is_result_valid(Created my-nginx-ccba8fbd8cc8160970f63f9a2696fc46,Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
deployment "nginx-deployment" configured,1.0)
2018-02-06 14:03:29,502 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:03:29,502 [MainThread  ] [ERROR]  actual_results = Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply
deployment "nginx-deployment" configured

2018-02-06 14:03:29,503 [MainThread  ] [ERROR]  expected_results = Created my-nginx-ccba8fbd8cc8160970f63f9a2696fc46

2018-02-06 14:03:29,503 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:29,503 [MainThread  ] [DEBUG]  deque(['kubectl get pods -l app=nginx'])
2018-02-06 14:03:29,503 [MainThread  ] [DEBUG]  run_command(kubectl get pods -l app=nginx)
2018-02-06 14:03:29,503 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods -l app=nginx'
2018-02-06 14:03:29,830 [MainThread  ] [DEBUG]  Response: 'NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-v47vm   0/1       Pending             0          0s
nginx-deployment-431080787-6z1lw    0/1       Terminating         0          1s
nginx-deployment-431080787-7rt82    0/1       Terminating         0          1s
nginx-deployment-431080787-bzq96    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-q7mvs    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-vztzl    0/1       Terminating         0          1s
'
2018-02-06 14:03:29,830 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods -l app=nginx'], 'expected_result': 'NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT\nmy-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46\nmy-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46\n'}
2018-02-06 14:03:29,830 [MainThread  ] [DEBUG]  is_result_valid(NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46
,NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-v47vm   0/1       Pending             0          0s
nginx-deployment-431080787-6z1lw    0/1       Terminating         0          1s
nginx-deployment-431080787-7rt82    0/1       Terminating         0          1s
nginx-deployment-431080787-bzq96    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-q7mvs    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-vztzl    0/1       Terminating         0          1s
,1.0)
2018-02-06 14:03:29,830 [MainThread  ] [DEBUG]  is_result_valid(NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46,NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-v47vm   0/1       Pending             0          0s
nginx-deployment-431080787-6z1lw    0/1       Terminating         0          1s
nginx-deployment-431080787-7rt82    0/1       Terminating         0          1s
nginx-deployment-431080787-bzq96    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-q7mvs    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-vztzl    0/1       Terminating         0          1s,1.0)
2018-02-06 14:03:29,832 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:03:29,832 [MainThread  ] [ERROR]  actual_results = NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-v47vm   0/1       Pending             0          0s
nginx-deployment-431080787-6z1lw    0/1       Terminating         0          1s
nginx-deployment-431080787-7rt82    0/1       Terminating         0          1s
nginx-deployment-431080787-bzq96    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-q7mvs    0/1       ContainerCreating   0          2s
nginx-deployment-431080787-vztzl    0/1       Terminating         0          1s

2018-02-06 14:03:29,832 [MainThread  ] [ERROR]  expected_results = NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46

2018-02-06 14:03:29,833 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:03:29,833 [MainThread  ] [DEBUG]  deque(['kubectl get rs -l app=nginx'])
2018-02-06 14:03:29,833 [MainThread  ] [DEBUG]  run_command(kubectl get rs -l app=nginx)
2018-02-06 14:03:29,833 [MainThread  ] [DEBUG]  Execute command: 'kubectl get rs -l app=nginx'
2018-02-06 14:03:30,128 [MainThread  ] [DEBUG]  Response: 'NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1885164871   1         1         0         1s
nginx-deployment-431080787    2         2         0         3s
'
2018-02-06 14:03:30,128 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get rs -l app=nginx'], 'expected_result': 'NAME                          DESIRED   CURRENT   READY     AGE\nnginx-deployment-3285060500   2         2         2         4m\nnginx-deployment-4234284026   0         0         0         4m\n'}
2018-02-06 14:03:30,128 [MainThread  ] [DEBUG]  is_result_valid(NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-3285060500   2         2         2         4m
nginx-deployment-4234284026   0         0         0         4m
,NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1885164871   1         1         0         1s
nginx-deployment-431080787    2         2         0         3s
,1.0)
2018-02-06 14:03:30,128 [MainThread  ] [DEBUG]  is_result_valid(NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-3285060500   2         2         2         4m
nginx-deployment-4234284026   0         0         0         4m,NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1885164871   1         1         0         1s
nginx-deployment-431080787    2         2         0         3s,1.0)
2018-02-06 14:03:30,129 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:03:30,129 [MainThread  ] [ERROR]  actual_results = NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1885164871   1         1         0         1s
nginx-deployment-431080787    2         2         0         3s

2018-02-06 14:03:30,129 [MainThread  ] [ERROR]  expected_results = NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-3285060500   2         2         2         4m
nginx-deployment-4234284026   0         0         0         4m

2018-02-06 14:04:10,214 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:04:10,214 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates. \n'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.   \n'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node. \n'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows:'})
2018-02-06 14:04:10,217 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Terminated pods aren’t currently automatically deleted, so you will need to delete them manually using'})
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world']})
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,218 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,219 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd']})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,220 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,221 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:04:10,222 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In another window, you can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old'})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx']})
2018-02-06 14:04:10,223 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get rs -l app=nginx']})
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:04:10,224 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:04:11,458 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:04:11,458 [MainThread  ] [DEBUG]  process()
2018-02-06 14:04:12,729 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:04:12,729 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:04:12,729 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:04:12,730 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:04:13,172 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" created
'
2018-02-06 14:04:13,172 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:04:13,173 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" created
,1.0)
2018-02-06 14:04:13,173 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" created,1.0)
2018-02-06 14:04:13,173 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:04:23,893 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:04:23,893 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:04:23,893 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:04:23,893 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:04:24,201 [MainThread  ] [DEBUG]  Response: 'NAME                                READY     STATUS      RESTARTS   AGE
hello-world                         0/1       Completed   0          11s
nginx-deployment-1885164871-r0f30   1/1       Running     0          32s
nginx-deployment-1885164871-v47vm   1/1       Running     0          55s
nginx2                              0/1       Pending     0          58s
redis-nginx                         2/2       Running     0          1m
'
2018-02-06 14:04:24,201 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS              RESTARTS   AGE\nhello-world   0/1       ContainerCreating   0          8s\n'}
2018-02-06 14:04:24,201 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,NAME                                READY     STATUS      RESTARTS   AGE
hello-world                         0/1       Completed   0          11s
nginx-deployment-1885164871-r0f30   1/1       Running     0          32s
nginx-deployment-1885164871-v47vm   1/1       Running     0          55s
nginx2                              0/1       Pending     0          58s
redis-nginx                         2/2       Running     0          1m
,1.0)
2018-02-06 14:04:24,201 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,NAME                                READY     STATUS      RESTARTS   AGE
hello-world                         0/1       Completed   0          11s
nginx-deployment-1885164871-r0f30   1/1       Running     0          32s
nginx-deployment-1885164871-v47vm   1/1       Running     0          55s
nginx2                              0/1       Pending     0          58s
redis-nginx                         2/2       Running     0          1m,1.0)
2018-02-06 14:04:24,202 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:04:24,202 [MainThread  ] [ERROR]  actual_results = NAME                                READY     STATUS      RESTARTS   AGE
hello-world                         0/1       Completed   0          11s
nginx-deployment-1885164871-r0f30   1/1       Running     0          32s
nginx-deployment-1885164871-v47vm   1/1       Running     0          55s
nginx2                              0/1       Pending     0          58s
redis-nginx                         2/2       Running     0          1m

2018-02-06 14:04:24,202 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:04:42,640 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:04:42,640 [MainThread  ] [DEBUG]  deque(['kubectl delete pod hello-world'])
2018-02-06 14:04:42,640 [MainThread  ] [DEBUG]  run_command(kubectl delete pod hello-world)
2018-02-06 14:04:42,640 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete pod hello-world'
2018-02-06 14:04:42,961 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" deleted
'
2018-02-06 14:04:42,961 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl delete pod hello-world'], 'expected_result': 'pod "hello-world" deleted\n'}
2018-02-06 14:04:42,961 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" deleted
,pod "hello-world" deleted
,1.0)
2018-02-06 14:04:42,961 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" deleted,pod "hello-world" deleted,1.0)
2018-02-06 14:04:42,961 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:04:45,173 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:04:45,173 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'])
2018-02-06 14:04:45,173 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml)
2018-02-06 14:04:45,174 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:04:45,679 [MainThread  ] [DEBUG]  Response: 'Error from server (AlreadyExists): error when creating "https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml": pods "redis-nginx" already exists
'
2018-02-06 14:04:45,679 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']}
2018-02-06 14:05:10,072 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:05:10,072 [MainThread  ] [DEBUG]  deque(['kubectl get nodes'])
2018-02-06 14:05:10,072 [MainThread  ] [DEBUG]  run_command(kubectl get nodes)
2018-02-06 14:05:10,072 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-06 14:05:10,389 [MainThread  ] [DEBUG]  Response: 'NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-39797000-0   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-1   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-2   Ready     agent     4h        v1.7.7
'
2018-02-06 14:05:10,389 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get nodes']}
2018-02-06 14:05:12,165 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:05:12,165 [MainThread  ] [DEBUG]  deque(['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd'])
2018-02-06 14:05:12,165 [MainThread  ] [DEBUG]  run_command(kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd)
2018-02-06 14:05:12,165 [MainThread  ] [DEBUG]  Execute command: 'kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd'
2018-02-06 14:05:12,409 [MainThread  ] [DEBUG]  Response: 'Error from server (NotFound): nodes "kubernetes-foo-node-1.c.a" not found
'
2018-02-06 14:05:12,409 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl label nodes kubernetes-foo-node-1.c.a disktype=ssd']}
2018-02-06 14:14:30,539 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:14:30,546 [MainThread  ] [DEBUG]  deque(['kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'])
2018-02-06 14:14:30,546 [MainThread  ] [DEBUG]  run_command(kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml)
2018-02-06 14:14:30,546 [MainThread  ] [DEBUG]  Execute command: 'kubectl create -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:14:37,411 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:14:37,411 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:14:37,412 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:14:37,412 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,412 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:14:37,412 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,412 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates.\n'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.\n'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node.\n'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,413 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Terminated pods aren’t currently automatically deleted, so you will need to delete them manually using'})
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world']})
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:14:37,414 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:14:37,415 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,416 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,417 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:14:37,418 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In another window, you can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old'})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx']})
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,419 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get rs -l app=nginx']})
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Cleanup'})
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete deploy/nginx-deployment', 'kubectl delete po/nginx2']})
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:14:37,420 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:14:37,421 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:14:38,607 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:14:38,607 [MainThread  ] [DEBUG]  process()
2018-02-06 14:14:43,641 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:14:43,641 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:14:43,641 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:14:43,641 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:14:44,234 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" created
'
2018-02-06 14:14:44,235 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:14:44,235 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" created
,1.0)
2018-02-06 14:14:44,235 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" created,1.0)
2018-02-06 14:14:44,235 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:14:47,651 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:14:47,651 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:14:47,651 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:14:47,651 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:14:47,949 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          3s
'
2018-02-06 14:14:47,949 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS              RESTARTS   AGE\nhello-world   0/1       ContainerCreating   0          8s\n'}
2018-02-06 14:14:47,949 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          3s
,1.0)
2018-02-06 14:14:47,950 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          3s,1.0)
2018-02-06 14:14:47,950 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:14:47,950 [MainThread  ] [ERROR]  actual_results = NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          3s

2018-02-06 14:14:47,950 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:14:52,860 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:14:52,860 [MainThread  ] [DEBUG]  deque(['kubectl delete pod hello-world'])
2018-02-06 14:14:52,861 [MainThread  ] [DEBUG]  run_command(kubectl delete pod hello-world)
2018-02-06 14:14:52,861 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete pod hello-world'
2018-02-06 14:14:53,228 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" deleted
'
2018-02-06 14:14:53,228 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl delete pod hello-world'], 'expected_result': 'pod "hello-world" deleted\n'}
2018-02-06 14:14:53,228 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" deleted
,pod "hello-world" deleted
,1.0)
2018-02-06 14:14:53,228 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" deleted,pod "hello-world" deleted,1.0)
2018-02-06 14:14:53,229 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:15:00,722 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:15:00,722 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'])
2018-02-06 14:15:00,722 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml)
2018-02-06 14:15:00,722 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:15:01,323 [MainThread  ] [DEBUG]  Response: 'pod "redis-nginx" created
'
2018-02-06 14:15:01,323 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']}
2018-02-06 14:15:05,532 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:15:05,532 [MainThread  ] [DEBUG]  deque(['kubectl get nodes'])
2018-02-06 14:15:05,533 [MainThread  ] [DEBUG]  run_command(kubectl get nodes)
2018-02-06 14:15:05,533 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-06 14:15:05,835 [MainThread  ] [DEBUG]  Response: 'NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-39797000-0   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-1   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-2   Ready     agent     4h        v1.7.7
'
2018-02-06 14:15:05,835 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get nodes']}
2018-02-06 14:15:12,272 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:15:12,272 [MainThread  ] [DEBUG]  deque(['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd'])
2018-02-06 14:15:12,272 [MainThread  ] [DEBUG]  run_command(NODE_NAME=$(kubectl get nodes -o name | head -1))
2018-02-06 14:15:12,273 [MainThread  ] [DEBUG]  Execute command: 'NODE_NAME=$(kubectl get nodes -o name | head -1)'
2018-02-06 14:15:12,701 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:15:14,395 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:15:14,395 [MainThread  ] [DEBUG]  deque(['kubectl label $NODE_NAME disktype=ssd'])
2018-02-06 14:15:14,395 [MainThread  ] [DEBUG]  run_command(kubectl label $NODE_NAME disktype=ssd)
2018-02-06 14:15:14,395 [MainThread  ] [DEBUG]  Execute command: 'kubectl label $NODE_NAME disktype=ssd'
2018-02-06 14:15:14,683 [MainThread  ] [DEBUG]  Response: 'error: 'disktype' already has a value (ssd), and --overwrite is false
'
2018-02-06 14:15:14,683 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']}
2018-02-06 14:20:15,437 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:20:15,437 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'])
2018-02-06 14:20:15,437 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml)
2018-02-06 14:20:15,437 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:20:26,473 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:20:26,473 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates.\n'})
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.\n'})
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:20:26,475 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node.\n'})
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows'})
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,476 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Terminated pods aren’t currently automatically deleted, so you will need to delete them manually using'})
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world']})
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:20:26,477 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:20:26,478 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:20:26,479 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,480 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,481 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In another window, you can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old'})
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx']})
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get rs -l app=nginx']})
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Cleanup'})
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete deploy/nginx-deployment', 'kubectl delete po/nginx2', 'kubectl label $NODE_NAME disktype-']})
2018-02-06 14:20:26,482 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:20:26,483 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:20:26,483 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:20:26,483 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:20:26,483 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:20:27,680 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:20:27,681 [MainThread  ] [DEBUG]  process()
2018-02-06 14:20:28,379 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:20:28,379 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:20:28,379 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:20:28,379 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:20:29,003 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" created
'
2018-02-06 14:20:29,003 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:20:29,004 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" created
,1.0)
2018-02-06 14:20:29,004 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" created,1.0)
2018-02-06 14:20:29,004 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:20:30,548 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:20:30,548 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:20:30,548 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:20:30,548 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:20:30,886 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s
redis-nginx   2/2       Running     0          5m
'
2018-02-06 14:20:30,886 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS              RESTARTS   AGE\nhello-world   0/1       ContainerCreating   0          8s\n'}
2018-02-06 14:20:30,886 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s
redis-nginx   2/2       Running     0          5m
,1.0)
2018-02-06 14:20:30,886 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s
redis-nginx   2/2       Running     0          5m,1.0)
2018-02-06 14:20:30,886 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:20:30,887 [MainThread  ] [ERROR]  actual_results = NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s
redis-nginx   2/2       Running     0          5m

2018-02-06 14:20:30,887 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:21:34,396 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:34,402 [MainThread  ] [DEBUG]  deque(['kubectl delete pod hello-world'])
2018-02-06 14:21:34,402 [MainThread  ] [DEBUG]  run_command(kubectl delete pod hello-world)
2018-02-06 14:21:34,403 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete pod hello-world'
2018-02-06 14:21:36,355 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:21:36,355 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates.\n'})
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:21:36,357 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.\n'})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node.\n'})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows'})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:21:36,358 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:21:36,359 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:21:36,360 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:21:36,361 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:21:36,362 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:21:36,363 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In another window, you can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old'})
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx']})
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get rs -l app=nginx']})
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,364 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Cleanup'})
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world', 'kubectl delete deploy/nginx-deployment', 'kubectl delete po/nginx2', 'kubectl label $NODE_NAME disktype-']})
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:21:36,365 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:21:37,570 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:21:37,570 [MainThread  ] [DEBUG]  process()
2018-02-06 14:21:39,129 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:39,129 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:21:39,129 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:21:39,129 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:21:39,668 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" unchanged
'
2018-02-06 14:21:39,670 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:21:39,670 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" unchanged
,1.0)
2018-02-06 14:21:39,670 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" unchanged,1.0)
2018-02-06 14:21:39,670 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:21:39,670 [MainThread  ] [ERROR]  actual_results = pod "hello-world" unchanged

2018-02-06 14:21:39,670 [MainThread  ] [ERROR]  expected_results = pod "hello-world" created

2018-02-06 14:21:40,508 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:40,509 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:21:40,509 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:21:40,509 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:21:40,864 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          1m
redis-nginx   2/2       Running     0          6m
'
2018-02-06 14:21:40,864 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS              RESTARTS   AGE\nhello-world   0/1       ContainerCreating   0          8s\n'}
2018-02-06 14:21:40,864 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          1m
redis-nginx   2/2       Running     0          6m
,1.0)
2018-02-06 14:21:40,864 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          1m
redis-nginx   2/2       Running     0          6m,1.0)
2018-02-06 14:21:40,865 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:21:40,865 [MainThread  ] [ERROR]  actual_results = NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          1m
redis-nginx   2/2       Running     0          6m

2018-02-06 14:21:40,865 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:21:43,662 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:43,662 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'])
2018-02-06 14:21:43,662 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml)
2018-02-06 14:21:43,662 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:21:44,233 [MainThread  ] [DEBUG]  Response: 'pod "redis-nginx" unchanged
'
2018-02-06 14:21:44,233 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']}
2018-02-06 14:21:45,397 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:45,397 [MainThread  ] [DEBUG]  deque(['kubectl get nodes'])
2018-02-06 14:21:45,397 [MainThread  ] [DEBUG]  run_command(kubectl get nodes)
2018-02-06 14:21:45,397 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-06 14:21:45,703 [MainThread  ] [DEBUG]  Response: 'NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-39797000-0   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-1   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-2   Ready     agent     4h        v1.7.7
'
2018-02-06 14:21:45,703 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get nodes']}
2018-02-06 14:21:47,052 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:47,052 [MainThread  ] [DEBUG]  deque(['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd'])
2018-02-06 14:21:47,052 [MainThread  ] [DEBUG]  run_command(NODE_NAME=$(kubectl get nodes -o name | head -1))
2018-02-06 14:21:47,052 [MainThread  ] [DEBUG]  Execute command: 'NODE_NAME=$(kubectl get nodes -o name | head -1)'
2018-02-06 14:21:47,350 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:21:47,953 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:47,953 [MainThread  ] [DEBUG]  deque(['kubectl label $NODE_NAME disktype=ssd'])
2018-02-06 14:21:47,953 [MainThread  ] [DEBUG]  run_command(kubectl label $NODE_NAME disktype=ssd)
2018-02-06 14:21:47,953 [MainThread  ] [DEBUG]  Execute command: 'kubectl label $NODE_NAME disktype=ssd'
2018-02-06 14:21:48,264 [MainThread  ] [DEBUG]  Response: 'node "aks-nodepool1-39797000-0" labeled
'
2018-02-06 14:21:48,265 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']}
2018-02-06 14:21:49,857 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:49,857 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'])
2018-02-06 14:21:49,857 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml)
2018-02-06 14:21:49,857 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:21:50,508 [MainThread  ] [DEBUG]  Response: 'pod "nginx2" created
'
2018-02-06 14:21:50,508 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']}
2018-02-06 14:21:51,223 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:51,223 [MainThread  ] [DEBUG]  deque(['kubectl describe pod/nginx2'])
2018-02-06 14:21:51,223 [MainThread  ] [DEBUG]  run_command(kubectl describe pod/nginx2)
2018-02-06 14:21:51,223 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe pod/nginx2'
2018-02-06 14:21:51,602 [MainThread  ] [DEBUG]  Response: 'Name:         nginx2
Namespace:    default
Node:         aks-nodepool1-39797000-0/10.240.0.5
Start Time:   Tue, 06 Feb 2018 14:21:50 -0800
Labels:       env=test
Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"env":"test"},"name":"nginx2","namespace":"default"},"spec":{"containers":[{"ima...
Status:       Pending
IP:           
Containers:
  nginx:
    Container ID:   
    Image:          nginx
    Image ID:       
    Port:           <none>
    State:          Waiting
      Reason:       ContainerCreating
    Ready:          False
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-wkpq4 (ro)
Conditions:
  Type           Status
  Initialized    True 
  Ready          False 
  PodScheduled   True 
Volumes:
  default-token-wkpq4:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-wkpq4
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  disktype=ssd
Tolerations:     node.alpha.kubernetes.io/notReady:NoExecute for 300s
                 node.alpha.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              1s    default-scheduler                  Successfully assigned nginx2 to aks-nodepool1-39797000-0
  Normal  SuccessfulMountVolume  1s    kubelet, aks-nodepool1-39797000-0  MountVolume.SetUp succeeded for volume "default-token-wkpq4"
'
2018-02-06 14:21:51,602 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl describe pod/nginx2']}
2018-02-06 14:21:55,049 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:55,049 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'])
2018-02-06 14:21:55,049 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml)
2018-02-06 14:21:55,049 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'
2018-02-06 14:21:55,665 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" created
'
2018-02-06 14:21:55,665 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'], 'expected_result': 'deployment "nginx-deployment" created\n'}
2018-02-06 14:21:55,665 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created
,deployment "nginx-deployment" created
,1.0)
2018-02-06 14:21:55,665 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created,deployment "nginx-deployment" created,1.0)
2018-02-06 14:21:55,666 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:21:58,913 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:21:58,913 [MainThread  ] [DEBUG]  deque(['kubectl describe deployment nginx-deployment'])
2018-02-06 14:21:58,913 [MainThread  ] [DEBUG]  run_command(kubectl describe deployment nginx-deployment)
2018-02-06 14:21:58,914 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe deployment nginx-deployment'
2018-02-06 14:21:59,249 [MainThread  ] [DEBUG]  Response: 'Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:21:55 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
                        kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":2,"te...
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  4s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2
'
2018-02-06 14:21:59,249 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment'], 'expected_result': '➜  hello-world kubectl describe deployment nginx-deployment\nName:            nginx-deployment\nNamespace:        default\nCreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500\nLabels:            app=nginx\nAnnotations:        deployment.kubernetes.io/revision=1\nSelector:        app=nginx\nReplicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable\nStrategyType:        RollingUpdate\nMinReadySeconds:    0\nRollingUpdateStrategy:    25% max unavailable, 25% max surge\nPod Template:\n  Labels:    app=nginx\n  Containers:\n   nginx:\n    Image:        nginx:1.7.9\n    Port:        80/TCP\n    Environment:    <none>\n    Mounts:        <none>\n  Volumes:        <none>\nConditions:\n  Type        Status    Reason\n  ----        ------    ------\n  Available     True    MinimumReplicasAvailable\n  Progressing     True    NewReplicaSetAvailable\nOldReplicaSets:    <none>\nNewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)\nEvents:\n  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message\n  ---------    --------    -----    ----            -------------    --------    ------            -------\n  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2\n'}
2018-02-06 14:21:59,250 [MainThread  ] [DEBUG]  is_result_valid(➜  hello-world kubectl describe deployment nginx-deployment
Name:            nginx-deployment
Namespace:        default
CreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500
Labels:            app=nginx
Annotations:        deployment.kubernetes.io/revision=1
Selector:        app=nginx
Replicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:        RollingUpdate
MinReadySeconds:    0
RollingUpdateStrategy:    25% max unavailable, 25% max surge
Pod Template:
  Labels:    app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:        80/TCP
    Environment:    <none>
    Mounts:        <none>
  Volumes:        <none>
Conditions:
  Type        Status    Reason
  ----        ------    ------
  Available     True    MinimumReplicasAvailable
  Progressing     True    NewReplicaSetAvailable
OldReplicaSets:    <none>
NewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)
Events:
  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message
  ---------    --------    -----    ----            -------------    --------    ------            -------
  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2
,Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:21:55 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
                        kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":2,"te...
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  4s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2
,1.0)
2018-02-06 14:21:59,250 [MainThread  ] [DEBUG]  is_result_valid(➜  hello-world kubectl describe deployment nginx-deployment
Name:            nginx-deployment
Namespace:        default
CreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500
Labels:            app=nginx
Annotations:        deployment.kubernetes.io/revision=1
Selector:        app=nginx
Replicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:        RollingUpdate
MinReadySeconds:    0
RollingUpdateStrategy:    25% max unavailable, 25% max surge
Pod Template:
  Labels:    app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:        80/TCP
    Environment:    <none>
    Mounts:        <none>
  Volumes:        <none>
Conditions:
  Type        Status    Reason
  ----        ------    ------
  Available     True    MinimumReplicasAvailable
  Progressing     True    NewReplicaSetAvailable
OldReplicaSets:    <none>
NewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)
Events:
  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message
  ---------    --------    -----    ----            -------------    --------    ------            -------
  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2,Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:21:55 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
                        kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":2,"te...
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  4s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2,1.0)
2018-02-06 14:21:59,257 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:21:59,257 [MainThread  ] [ERROR]  actual_results = Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:21:55 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
                        kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":2,"te...
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  4s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2

2018-02-06 14:21:59,257 [MainThread  ] [ERROR]  expected_results = ➜  hello-world kubectl describe deployment nginx-deployment
Name:            nginx-deployment
Namespace:        default
CreationTimestamp:    Fri, 18 Aug 2017 11:30:55 -0500
Labels:            app=nginx
Annotations:        deployment.kubernetes.io/revision=1
Selector:        app=nginx
Replicas:        2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:        RollingUpdate
MinReadySeconds:    0
RollingUpdateStrategy:    25% max unavailable, 25% max surge
Pod Template:
  Labels:    app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:        80/TCP
    Environment:    <none>
    Mounts:        <none>
  Volumes:        <none>
Conditions:
  Type        Status    Reason
  ----        ------    ------
  Available     True    MinimumReplicasAvailable
  Progressing     True    NewReplicaSetAvailable
OldReplicaSets:    <none>
NewReplicaSet:    nginx-deployment-4234284026 (2/2 replicas created)
Events:
  FirstSeen    LastSeen    Count    From            SubObjectPath    Type        Reason            Message
  ---------    --------    -----    ----            -------------    --------    ------            -------
  37s        37s        1    deployment-controller            Normal        ScalingReplicaSet    Scaled up replica set nginx-deployment-4234284026 to 2

2018-02-06 14:22:17,741 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:22:17,747 [MainThread  ] [DEBUG]  deque(['kubectl scale --replicas=5 deployment/nginx-deployment'])
2018-02-06 14:22:17,748 [MainThread  ] [DEBUG]  run_command(kubectl scale --replicas=5 deployment/nginx-deployment)
2018-02-06 14:22:17,748 [MainThread  ] [DEBUG]  Execute command: 'kubectl scale --replicas=5 deployment/nginx-deployment'
2018-02-06 14:22:19,129 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" scaled
'
2018-02-06 14:22:19,130 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']}
2018-02-06 14:22:23,067 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:22:23,067 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'])
2018-02-06 14:22:23,067 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml)
2018-02-06 14:22:23,067 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'
2018-02-06 14:22:23,622 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" configured
'
2018-02-06 14:22:23,622 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'], 'expected_result': 'deployment "nginx-deployment" configured\n'}
2018-02-06 14:22:23,622 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" configured
,deployment "nginx-deployment" configured
,1.0)
2018-02-06 14:22:23,622 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" configured,deployment "nginx-deployment" configured,1.0)
2018-02-06 14:22:23,622 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:22:26,127 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:22:26,127 [MainThread  ] [DEBUG]  deque(['kubectl get pods -l app=nginx'])
2018-02-06 14:22:26,127 [MainThread  ] [DEBUG]  run_command(kubectl get pods -l app=nginx)
2018-02-06 14:22:26,127 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods -l app=nginx'
2018-02-06 14:22:26,427 [MainThread  ] [DEBUG]  Response: 'NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-27858   0/1       ContainerCreating   0          1s
nginx-deployment-1885164871-7141k   1/1       Running             0          3s
nginx-deployment-431080787-1kbzd    1/1       Running             0          31s
nginx-deployment-431080787-vwqff    0/1       Terminating         0          31s
'
2018-02-06 14:22:26,427 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods -l app=nginx'], 'expected_result': 'NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT\nmy-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46\nmy-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46\n'}
2018-02-06 14:22:26,427 [MainThread  ] [DEBUG]  is_result_valid(NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46
,NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-27858   0/1       ContainerCreating   0          1s
nginx-deployment-1885164871-7141k   1/1       Running             0          3s
nginx-deployment-431080787-1kbzd    1/1       Running             0          31s
nginx-deployment-431080787-vwqff    0/1       Terminating         0          31s
,1.0)
2018-02-06 14:22:26,427 [MainThread  ] [DEBUG]  is_result_valid(NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46,NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-27858   0/1       ContainerCreating   0          1s
nginx-deployment-1885164871-7141k   1/1       Running             0          3s
nginx-deployment-431080787-1kbzd    1/1       Running             0          31s
nginx-deployment-431080787-vwqff    0/1       Terminating         0          31s,1.0)
2018-02-06 14:22:26,429 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:22:26,429 [MainThread  ] [ERROR]  actual_results = NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-27858   0/1       ContainerCreating   0          1s
nginx-deployment-1885164871-7141k   1/1       Running             0          3s
nginx-deployment-431080787-1kbzd    1/1       Running             0          31s
nginx-deployment-431080787-vwqff    0/1       Terminating         0          31s

2018-02-06 14:22:26,429 [MainThread  ] [ERROR]  expected_results = NAME                                              READY     STATUS    RESTARTS   AGE       DEPLOYMENT
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-k156z   1/1       Running   0          1m        ccba8fbd8cc8160970f63f9a2696fc46
my-nginx-ccba8fbd8cc8160970f63f9a2696fc46-v95yh   1/1       Running   0          35s       ccba8fbd8cc8160970f63f9a2696fc46

2018-02-06 14:24:49,835 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:24:49,841 [MainThread  ] [DEBUG]  deque(['kubectl get rs -l app=nginx'])
2018-02-06 14:24:49,841 [MainThread  ] [DEBUG]  run_command(kubectl get rs -l app=nginx)
2018-02-06 14:24:49,841 [MainThread  ] [DEBUG]  Execute command: 'kubectl get rs -l app=nginx'
2018-02-06 14:24:51,763 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:24:51,763 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:24:51,764 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:24:51,764 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates.\n'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.\n'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node.\n'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows'})
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,765 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:24:51,766 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:24:51,767 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,767 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:24:51,767 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,767 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:24:51,767 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:24:51,767 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,768 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:24:51,769 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,770 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'View the pods and Replica sets'})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old\n'})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx', 'kubectl get rs -l app=nginx']})
2018-02-06 14:24:51,771 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Cleanup'})
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world', 'kubectl delete deploy/nginx-deployment', 'kubectl delete po/nginx2', 'kubectl label $NODE_NAME disktype-']})
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:24:51,772 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:24:52,939 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:24:52,940 [MainThread  ] [DEBUG]  process()
2018-02-06 14:26:27,411 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:26:27,411 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:26:27,411 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:26:27,411 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:26:48,656 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:26:48,656 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:26:48,658 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:26:48,658 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,658 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:26:48,658 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,658 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates.\n'})
2018-02-06 14:26:48,658 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.\n'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node.\n'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:26:48,659 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:26:48,660 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']})
2018-02-06 14:26:48,661 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:26:48,662 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,663 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,664 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'View the pods and Replica sets'})
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old\n'})
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx', 'kubectl get rs -l app=nginx']})
2018-02-06 14:26:48,665 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Cleanup'})
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete pod hello-world', 'kubectl delete deploy/nginx-deployment', 'kubectl delete po/nginx2', 'kubectl label $NODE_NAME disktype-']})
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:26:48,666 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:26:48,667 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:26:49,858 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:26:49,859 [MainThread  ] [DEBUG]  process()
2018-02-06 14:26:53,085 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:26:53,085 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:26:53,085 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:26:53,085 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:26:56,074 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" created
'
2018-02-06 14:26:56,074 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:26:56,074 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" created
,1.0)
2018-02-06 14:26:56,074 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" created,1.0)
2018-02-06 14:26:56,074 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:26:58,620 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:26:58,620 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:26:58,620 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:26:58,621 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:26:59,456 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          4s
redis-nginx   2/2       Running     0          11m
'
2018-02-06 14:26:59,456 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS              RESTARTS   AGE\nhello-world   0/1       ContainerCreating   0          8s\n'}
2018-02-06 14:26:59,457 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          4s
redis-nginx   2/2       Running     0          11m
,1.0)
2018-02-06 14:26:59,457 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          4s
redis-nginx   2/2       Running     0          11m,1.0)
2018-02-06 14:26:59,457 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:26:59,457 [MainThread  ] [ERROR]  actual_results = NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          4s
redis-nginx   2/2       Running     0          11m

2018-02-06 14:26:59,458 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:27:27,569 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:27:27,570 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'])
2018-02-06 14:27:27,570 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml)
2018-02-06 14:27:27,570 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:28:35,869 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:28:35,869 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:28:35,870 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:28:35,870 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates.\n'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.\n'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node.\n'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows'})
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,871 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:28:35,872 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:28:35,873 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:28:35,874 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:28:35,875 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:28:35,876 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'View the pods and Replica sets'})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old\n'})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx', 'kubectl get rs -l app=nginx']})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:28:35,877 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Cleanup'})
2018-02-06 14:28:35,878 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,878 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml', 'kubectl label $NODE_NAME disktype-']})
2018-02-06 14:28:35,878 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:28:35,878 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:28:35,878 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:28:35,878 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:28:35,878 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:28:36,755 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:28:36,755 [MainThread  ] [DEBUG]  process()
2018-02-06 14:28:38,857 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:28:38,857 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'])
2018-02-06 14:28:38,857 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:28:38,857 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:28:39,446 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" created
'
2018-02-06 14:28:39,446 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'], 'expected_result': 'pod "hello-world" created\n'}
2018-02-06 14:28:39,446 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" created
,1.0)
2018-02-06 14:28:39,446 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" created,1.0)
2018-02-06 14:28:39,447 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:28:41,260 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:28:41,260 [MainThread  ] [DEBUG]  deque(['kubectl get pods --show-all'])
2018-02-06 14:28:41,260 [MainThread  ] [DEBUG]  run_command(kubectl get pods --show-all)
2018-02-06 14:28:41,260 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:28:41,598 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s
'
2018-02-06 14:28:41,598 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods --show-all'], 'expected_result': 'NAME          READY     STATUS              RESTARTS   AGE\nhello-world   0/1       ContainerCreating   0          8s\n'}
2018-02-06 14:28:41,598 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s
,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s
,1.0)
2018-02-06 14:28:41,598 [MainThread  ] [DEBUG]  is_result_valid(NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s,NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s,1.0)
2018-02-06 14:28:41,599 [MainThread  ] [ERROR]  is_result_valid failed
2018-02-06 14:28:41,599 [MainThread  ] [ERROR]  actual_results = NAME          READY     STATUS      RESTARTS   AGE
hello-world   0/1       Completed   0          2s

2018-02-06 14:28:41,599 [MainThread  ] [ERROR]  expected_results = NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          8s

2018-02-06 14:31:54,111 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:31:54,117 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'])
2018-02-06 14:31:54,118 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml)
2018-02-06 14:31:54,118 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:31:55,092 [MainThread  ] [DEBUG]  Response: 'pod "redis-nginx" created
'
2018-02-06 14:31:55,092 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']}
2018-02-06 14:31:57,854 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:31:57,855 [MainThread  ] [DEBUG]  deque(['kubectl get nodes'])
2018-02-06 14:31:57,855 [MainThread  ] [DEBUG]  run_command(kubectl get nodes)
2018-02-06 14:31:57,855 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-06 14:31:58,187 [MainThread  ] [DEBUG]  Response: 'NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-39797000-0   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-1   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-2   Ready     agent     4h        v1.7.7
'
2018-02-06 14:31:58,187 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get nodes']}
2018-02-06 14:31:59,171 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:31:59,171 [MainThread  ] [DEBUG]  deque(['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd'])
2018-02-06 14:31:59,172 [MainThread  ] [DEBUG]  run_command(NODE_NAME=$(kubectl get nodes -o name | head -1))
2018-02-06 14:31:59,172 [MainThread  ] [DEBUG]  Execute command: 'NODE_NAME=$(kubectl get nodes -o name | head -1)'
2018-02-06 14:32:00,507 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:32:01,071 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:01,071 [MainThread  ] [DEBUG]  deque(['kubectl label $NODE_NAME disktype=ssd'])
2018-02-06 14:32:01,071 [MainThread  ] [DEBUG]  run_command(kubectl label $NODE_NAME disktype=ssd)
2018-02-06 14:32:01,071 [MainThread  ] [DEBUG]  Execute command: 'kubectl label $NODE_NAME disktype=ssd'
2018-02-06 14:32:01,846 [MainThread  ] [DEBUG]  Response: 'node "aks-nodepool1-39797000-0" labeled
'
2018-02-06 14:32:01,846 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']}
2018-02-06 14:32:03,599 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:03,599 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'])
2018-02-06 14:32:03,600 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml)
2018-02-06 14:32:03,600 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:32:05,346 [MainThread  ] [DEBUG]  Response: 'pod "nginx2" created
'
2018-02-06 14:32:05,346 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']}
2018-02-06 14:32:06,054 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:06,054 [MainThread  ] [DEBUG]  deque(['kubectl describe pod/nginx2'])
2018-02-06 14:32:06,054 [MainThread  ] [DEBUG]  run_command(kubectl describe pod/nginx2)
2018-02-06 14:32:06,054 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe pod/nginx2'
2018-02-06 14:32:06,391 [MainThread  ] [DEBUG]  Response: 'Name:         nginx2
Namespace:    default
Node:         aks-nodepool1-39797000-0/10.240.0.5
Start Time:   Tue, 06 Feb 2018 14:32:05 -0800
Labels:       env=test
Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"env":"test"},"name":"nginx2","namespace":"default"},"spec":{"containers":[{"ima...
Status:       Pending
IP:           
Containers:
  nginx:
    Container ID:   
    Image:          nginx
    Image ID:       
    Port:           <none>
    State:          Waiting
      Reason:       ContainerCreating
    Ready:          False
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-wkpq4 (ro)
Conditions:
  Type           Status
  Initialized    True 
  Ready          False 
  PodScheduled   True 
Volumes:
  default-token-wkpq4:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-wkpq4
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  disktype=ssd
Tolerations:     node.alpha.kubernetes.io/notReady:NoExecute for 300s
                 node.alpha.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              1s    default-scheduler                  Successfully assigned nginx2 to aks-nodepool1-39797000-0
  Normal  SuccessfulMountVolume  1s    kubelet, aks-nodepool1-39797000-0  MountVolume.SetUp succeeded for volume "default-token-wkpq4"
'
2018-02-06 14:32:06,391 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl describe pod/nginx2']}
2018-02-06 14:32:07,377 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:07,377 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'])
2018-02-06 14:32:07,378 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml)
2018-02-06 14:32:07,378 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'
2018-02-06 14:32:08,977 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" created
'
2018-02-06 14:32:08,977 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'], 'expected_result': 'deployment "nginx-deployment" created\n'}
2018-02-06 14:32:08,977 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created
,deployment "nginx-deployment" created
,1.0)
2018-02-06 14:32:08,977 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created,deployment "nginx-deployment" created,1.0)
2018-02-06 14:32:08,977 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:32:10,650 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:10,650 [MainThread  ] [DEBUG]  deque(['kubectl describe deployment nginx-deployment'])
2018-02-06 14:32:10,650 [MainThread  ] [DEBUG]  run_command(kubectl describe deployment nginx-deployment)
2018-02-06 14:32:10,650 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe deployment nginx-deployment'
2018-02-06 14:32:11,902 [MainThread  ] [DEBUG]  Response: 'Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:32:08 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
                        kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":2,"te...
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  3s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2
'
2018-02-06 14:32:11,902 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']}
2018-02-06 14:32:13,355 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:13,355 [MainThread  ] [DEBUG]  deque(['kubectl scale --replicas=5 deployment/nginx-deployment'])
2018-02-06 14:32:13,355 [MainThread  ] [DEBUG]  run_command(kubectl scale --replicas=5 deployment/nginx-deployment)
2018-02-06 14:32:13,355 [MainThread  ] [DEBUG]  Execute command: 'kubectl scale --replicas=5 deployment/nginx-deployment'
2018-02-06 14:32:15,126 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" scaled
'
2018-02-06 14:32:15,126 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']}
2018-02-06 14:32:24,469 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:24,469 [MainThread  ] [DEBUG]  deque(['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'])
2018-02-06 14:32:24,469 [MainThread  ] [DEBUG]  run_command(kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml)
2018-02-06 14:32:24,469 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'
2018-02-06 14:32:25,364 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" configured
'
2018-02-06 14:32:25,364 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'], 'expected_result': 'deployment "nginx-deployment" configured\n'}
2018-02-06 14:32:25,364 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" configured
,deployment "nginx-deployment" configured
,1.0)
2018-02-06 14:32:25,364 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" configured,deployment "nginx-deployment" configured,1.0)
2018-02-06 14:32:25,365 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:32:27,773 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:27,773 [MainThread  ] [DEBUG]  deque(['kubectl get pods -l app=nginx', 'kubectl get rs -l app=nginx'])
2018-02-06 14:32:27,773 [MainThread  ] [DEBUG]  run_command(kubectl get pods -l app=nginx)
2018-02-06 14:32:27,773 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods -l app=nginx'
2018-02-06 14:32:28,116 [MainThread  ] [DEBUG]  Response: 'NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-g7lh5   0/1       ContainerCreating   0          3s
nginx-deployment-431080787-pbtwv    1/1       Running             0          20s
nginx-deployment-431080787-prf68    1/1       Running             0          20s
'
2018-02-06 14:32:30,289 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:30,289 [MainThread  ] [DEBUG]  deque(['kubectl get rs -l app=nginx'])
2018-02-06 14:32:30,289 [MainThread  ] [DEBUG]  run_command(kubectl get rs -l app=nginx)
2018-02-06 14:32:30,290 [MainThread  ] [DEBUG]  Execute command: 'kubectl get rs -l app=nginx'
2018-02-06 14:32:30,591 [MainThread  ] [DEBUG]  Response: 'NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1885164871   1         1         0         5s
nginx-deployment-431080787    2         2         2         22s
'
2018-02-06 14:32:30,591 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl get pods -l app=nginx', 'kubectl get rs -l app=nginx']}
2018-02-06 14:32:32,127 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:32,127 [MainThread  ] [DEBUG]  deque(['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml', 'kubectl label $NODE_NAME disktype-'])
2018-02-06 14:32:32,128 [MainThread  ] [DEBUG]  run_command(kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml)
2018-02-06 14:32:32,128 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:32:33,512 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" deleted
'
2018-02-06 14:32:34,605 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:34,605 [MainThread  ] [DEBUG]  deque(['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml', 'kubectl label $NODE_NAME disktype-'])
2018-02-06 14:32:34,605 [MainThread  ] [DEBUG]  run_command(kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml)
2018-02-06 14:32:34,605 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:32:35,309 [MainThread  ] [DEBUG]  Response: 'pod "redis-nginx" deleted
'
2018-02-06 14:32:35,783 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:35,783 [MainThread  ] [DEBUG]  deque(['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml', 'kubectl label $NODE_NAME disktype-'])
2018-02-06 14:32:35,783 [MainThread  ] [DEBUG]  run_command(kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml)
2018-02-06 14:32:35,783 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:32:36,238 [MainThread  ] [DEBUG]  Response: 'pod "nginx2" deleted
'
2018-02-06 14:32:36,681 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:36,682 [MainThread  ] [DEBUG]  deque(['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml', 'kubectl label $NODE_NAME disktype-'])
2018-02-06 14:32:36,682 [MainThread  ] [DEBUG]  run_command(kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml)
2018-02-06 14:32:36,682 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'
2018-02-06 14:32:42,040 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" deleted
'
2018-02-06 14:32:42,649 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:32:42,649 [MainThread  ] [DEBUG]  deque(['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml', 'kubectl label $NODE_NAME disktype-'])
2018-02-06 14:32:42,649 [MainThread  ] [DEBUG]  run_command(kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml)
2018-02-06 14:32:42,650 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'
2018-02-06 14:32:43,556 [MainThread  ] [DEBUG]  Response: 'Error from server (NotFound): error when stopping "https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml": deployments.extensions "nginx-deployment" not found
'
2018-02-06 14:34:16,096 [MainThread  ] [DEBUG]  Output=None
2018-02-06 14:34:16,097 [MainThread  ] [DEBUG]  deque(['kubectl label $NODE_NAME disktype-'])
2018-02-06 14:34:16,097 [MainThread  ] [DEBUG]  run_command(kubectl label $NODE_NAME disktype-)
2018-02-06 14:34:16,097 [MainThread  ] [DEBUG]  Execute command: 'kubectl label $NODE_NAME disktype-'
2018-02-06 14:34:16,407 [MainThread  ] [DEBUG]  Response: 'node "aks-nodepool1-39797000-0" labeled
'
2018-02-06 14:34:16,407 [MainThread  ] [DEBUG]  {'type': 'commands', 'content': ['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml', 'kubectl label $NODE_NAME disktype-']}
2018-02-06 14:34:23,492 [MainThread  ] [DEBUG]  parse_file(file_path=k8s-features.md, is_prereq=False
2018-02-06 14:34:23,492 [MainThread  ] [DEBUG]  parse_file::start_path=/Users/thfalgou/git/workshops/kubernetes
2018-02-06 14:34:23,493 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 1, 'content': 'Containers Orchestrator hands-on lab with Kubernetes'})
2018-02-06 14:34:23,493 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,493 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Experimenting with Kubernetes Features'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'We will highlight three main Kubernetes features in this section: placement, reconciliation and application rolling updates.\n'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Placement'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This section focuses on containers’ placement using Kubernetes, which addresses two main issues a) placing a container relative to other containers, whether required to be on the same node as a collection (i.e. pod) or on different nodes and b) which nodes to run the collection of containers relative to other collections. We will address each issue at a time.\n'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing a Container Relative to Other Containers'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Kubernetes uses the concept of Pods as a logical abstract to collect containers in the same collection, which can then be guaranteed to be deployed to the same node.\n'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Kubernetes executes containers in `Pods`. A pod containing a simple Hello World container can be specified in YAML as follows'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/hello-world.yaml\n'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'This pod can be created using the create command'})
2018-02-06 14:34:23,494 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml']})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can see the pod you created using the get command'})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods --show-all']})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Let us now start a new pod with two containers. For example, the following configuration file creates two containers: a redis key-value store image, and a nginx frontend image'})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample.yaml\n'})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the the pod:\n'})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml']})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Placing Pods on Various Kubernetes Nodes'})
2018-02-06 14:34:23,495 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,496 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can constrain a  to only be able to run on particular  or to prefer to run on particular nodes. There are several ways to do this, and they all use  selectors to make the selection. Generally, such constraints are unnecessary, as the scheduler will automatically do a reasonable placement (e.g. spread your pods across nodes, not place the pod on a node with insufficient free resources, etc.) but there are some circumstances where you may want more control where a pod lands, e.g. to ensure that a pod ends up on a machine with an SSD attached to it, or to co-locate pods from two different services that communicate a lot into the same availability zone.\n'})
2018-02-06 14:34:23,496 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': ' is the simplest form of constraint.  is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as labels (it can have additional labels as well).\n'})
2018-02-06 14:34:23,496 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You need to attach labels to a node using; kubectl label nodes  =, as follows'})
2018-02-06 14:34:23,496 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,496 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Get the names of the nodes on your cluster\n'})
2018-02-06 14:34:23,496 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get nodes']})
2018-02-06 14:34:23,496 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'then add a label to your specific node\n'})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['NODE_NAME=$(kubectl get nodes -o name | head -1)', 'kubectl label $NODE_NAME disktype=ssd']})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can then specify the label in your pod config file as a nodeSelector section'})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/pod-sample-2.yaml\n'})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Create the pod\n'})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml']})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe pod/nginx2']})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Reconciliation'})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here.\n'})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.\n'})
2018-02-06 14:34:23,497 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec section.\n'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\n'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'A Deployment controller provides declarative updates for Pods and ReplicaSets.\n'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. \n'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For example, your pods get re-created on a node after disruptive maintenance such as a kernel upgrade. A simple case is to create 1 Replication Set object in order to reliably run one instance of a Pod indefinitely.\n'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 3, 'content': 'Create an example of Replication Set and Deployment config. It runs 3 copies of the nginx web server'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/nginx-deployment.yaml\n'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Run the new pod'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml']})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Check the status of the replica controller'})
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,498 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl describe deployment nginx-deployment']})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'Now, you can increase the number of replicas from 3 to 5 as follows, then query your pod using “kubectl describe replicationcontrollers/nginx”'})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl scale --replicas=5 deployment/nginx-deployment']})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'You can experiment with deleting a container and see how it come up again afterwards automatically by the replica controller, by using cmd line instructions from first part of the lab'})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Rolling Updates'})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'From the Kubernetes docs here and here.\n'})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': "To update a service without an outage, `kubectl` supports what is called 'rolling update', which updates one pod at a time, rather than taking down the entire service at the same time. A rolling update applies changes to the configuration of pods being managed by a replication controller. The changes can be passed as a new replication controller configuration file; or, if only updating the image, a new container image can be specified directly.\n"})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This example demonstrates the usage of Kubernetes to perform a rolling update for a new container image on a running group of pods.\n'})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'In the previous deployment, we used nginx:1.7.9.  Now we want to upgrade to 1.8'})
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,499 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'https://github.com/lastcoolnameleft/workshops/blob/master/kubernetes/yaml/deployment-nginx-update.yaml\n'})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'To update to container image to ngnix 1.9.1, you can use kubectl rolling-update --image to specify the new image:'})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml']})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  set_block(results)
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 4, 'content': 'View the pods and Replica sets'})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'You can see that kubectl added a deployment label to the pods, whose value is a hash of the configuration, to distinguish the new pods from the old\n'})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl get pods -l app=nginx', 'kubectl get rs -l app=nginx']})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'This is one example where the immutability of containers is a huge asset, in rolling new updates and in devops. \n'})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'For more exercises and info on Kubernetes, the Kubernetes website has a wealth of information and easy to follow on its various features (http://kubernetes.io/docs/).\n'})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Cleanup'})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  append_body({'type': 'commands', 'content': ['kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml', 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml', 'kubectl label $NODE_NAME disktype-']})
2018-02-06 14:34:23,500 [MainThread  ] [DEBUG]  set_block(None)
2018-02-06 14:34:23,501 [MainThread  ] [DEBUG]  append_body({'type': 'heading', 'level': 2, 'content': 'Lab Navigation'})
2018-02-06 14:34:23,501 [MainThread  ] [DEBUG]  parse_file():unable to determing header type.
2018-02-06 14:34:23,501 [MainThread  ] [DEBUG]  append_body({'type': 'text', 'content': 'Back to Index\n'})
2018-02-06 14:34:23,501 [MainThread  ] [DEBUG]  Execute command: 'cd /Users/thfalgou/git/workshops/kubernetes'
2018-02-06 14:34:24,690 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:34:24,691 [MainThread  ] [DEBUG]  process()
2018-02-06 14:34:24,691 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:34:25,270 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" created
'
2018-02-06 14:34:25,271 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created
,pod "hello-world" created
,1.0)
2018-02-06 14:34:25,271 [MainThread  ] [DEBUG]  is_result_valid(pod "hello-world" created,pod "hello-world" created,1.0)
2018-02-06 14:34:25,271 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:34:25,271 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods --show-all'
2018-02-06 14:34:25,606 [MainThread  ] [DEBUG]  Response: 'NAME          READY     STATUS              RESTARTS   AGE
hello-world   0/1       ContainerCreating   0          0s
'
2018-02-06 14:34:25,606 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:34:26,218 [MainThread  ] [DEBUG]  Response: 'pod "redis-nginx" created
'
2018-02-06 14:34:26,219 [MainThread  ] [DEBUG]  Execute command: 'kubectl get nodes'
2018-02-06 14:34:26,530 [MainThread  ] [DEBUG]  Response: 'NAME                       STATUS    ROLES     AGE       VERSION
aks-nodepool1-39797000-0   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-1   Ready     agent     4h        v1.7.7
aks-nodepool1-39797000-2   Ready     agent     4h        v1.7.7
'
2018-02-06 14:34:26,530 [MainThread  ] [DEBUG]  Execute command: 'NODE_NAME=$(kubectl get nodes -o name | head -1)'
2018-02-06 14:34:26,788 [MainThread  ] [DEBUG]  Response: ''
2018-02-06 14:34:26,788 [MainThread  ] [DEBUG]  Execute command: 'kubectl label $NODE_NAME disktype=ssd'
2018-02-06 14:34:27,049 [MainThread  ] [DEBUG]  Response: 'node "aks-nodepool1-39797000-0" labeled
'
2018-02-06 14:34:27,050 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:34:27,634 [MainThread  ] [DEBUG]  Response: 'pod "nginx2" created
'
2018-02-06 14:34:27,634 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe pod/nginx2'
2018-02-06 14:34:27,986 [MainThread  ] [DEBUG]  Response: 'Name:         nginx2
Namespace:    default
Node:         aks-nodepool1-39797000-0/10.240.0.5
Start Time:   Tue, 06 Feb 2018 14:34:27 -0800
Labels:       env=test
Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"env":"test"},"name":"nginx2","namespace":"default"},"spec":{"containers":[{"ima...
Status:       Pending
IP:           
Containers:
  nginx:
    Container ID:   
    Image:          nginx
    Image ID:       
    Port:           <none>
    State:          Waiting
      Reason:       ContainerCreating
    Ready:          False
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-wkpq4 (ro)
Conditions:
  Type           Status
  Initialized    True 
  Ready          False 
  PodScheduled   True 
Volumes:
  default-token-wkpq4:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-wkpq4
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  disktype=ssd
Tolerations:     node.alpha.kubernetes.io/notReady:NoExecute for 300s
                 node.alpha.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              0s    default-scheduler                  Successfully assigned nginx2 to aks-nodepool1-39797000-0
  Normal  SuccessfulMountVolume  0s    kubelet, aks-nodepool1-39797000-0  MountVolume.SetUp succeeded for volume "default-token-wkpq4"
'
2018-02-06 14:34:27,986 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'
2018-02-06 14:34:28,546 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" created
'
2018-02-06 14:34:28,547 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created
,deployment "nginx-deployment" created
,1.0)
2018-02-06 14:34:28,547 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" created,deployment "nginx-deployment" created,1.0)
2018-02-06 14:34:28,547 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:34:28,547 [MainThread  ] [DEBUG]  Execute command: 'kubectl describe deployment nginx-deployment'
2018-02-06 14:34:28,903 [MainThread  ] [DEBUG]  Response: 'Name:                   nginx-deployment
Namespace:              default
CreationTimestamp:      Tue, 06 Feb 2018 14:34:28 -0800
Labels:                 app=nginx
Annotations:            deployment.kubernetes.io/revision=1
                        kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"apps/v1beta1","kind":"Deployment","metadata":{"annotations":{},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":2,"te...
Selector:               app=nginx
Replicas:               2 desired | 2 updated | 2 total | 0 available | 2 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=nginx
  Containers:
   nginx:
    Image:        nginx:1.7.9
    Port:         80/TCP
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      False   MinimumReplicasUnavailable
  Progressing    True    ReplicaSetUpdated
OldReplicaSets:  <none>
NewReplicaSet:   nginx-deployment-431080787 (2/2 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  0s    deployment-controller  Scaled up replica set nginx-deployment-431080787 to 2
'
2018-02-06 14:34:28,903 [MainThread  ] [DEBUG]  Execute command: 'kubectl scale --replicas=5 deployment/nginx-deployment'
2018-02-06 14:34:30,225 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" scaled
'
2018-02-06 14:34:30,225 [MainThread  ] [DEBUG]  Execute command: 'kubectl apply -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/deployment-nginx-update.yaml'
2018-02-06 14:34:30,789 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" configured
'
2018-02-06 14:34:30,790 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" configured
,deployment "nginx-deployment" configured
,1.0)
2018-02-06 14:34:30,790 [MainThread  ] [DEBUG]  is_result_valid(deployment "nginx-deployment" configured,deployment "nginx-deployment" configured,1.0)
2018-02-06 14:34:30,790 [MainThread  ] [INFO ]  is_result_valid passed
2018-02-06 14:34:30,790 [MainThread  ] [DEBUG]  Execute command: 'kubectl get pods -l app=nginx'
2018-02-06 14:34:31,086 [MainThread  ] [DEBUG]  Response: 'NAME                                READY     STATUS              RESTARTS   AGE
nginx-deployment-1885164871-fqs4t   0/1       ContainerCreating   0          1s
nginx-deployment-431080787-1mj4q    1/1       Running             0          3s
nginx-deployment-431080787-f2z53    1/1       Running             0          3s
nginx-deployment-431080787-js85k    0/1       Terminating         0          1s
nginx-deployment-431080787-wnjz1    0/1       Terminating         0          1s
nginx-deployment-431080787-wxrzs    0/1       Terminating         0          1s
'
2018-02-06 14:34:31,086 [MainThread  ] [DEBUG]  Execute command: 'kubectl get rs -l app=nginx'
2018-02-06 14:34:31,412 [MainThread  ] [DEBUG]  Response: 'NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1885164871   1         1         0         1s
nginx-deployment-431080787    2         2         2         3s
'
2018-02-06 14:34:31,413 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/hello-world.yaml'
2018-02-06 14:34:31,922 [MainThread  ] [DEBUG]  Response: 'pod "hello-world" deleted
'
2018-02-06 14:34:31,922 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample.yaml'
2018-02-06 14:34:32,363 [MainThread  ] [DEBUG]  Response: 'pod "redis-nginx" deleted
'
2018-02-06 14:34:32,363 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/pod-sample-2.yaml'
2018-02-06 14:34:32,822 [MainThread  ] [DEBUG]  Response: 'pod "nginx2" deleted
'
2018-02-06 14:34:32,822 [MainThread  ] [DEBUG]  Execute command: 'kubectl delete -f https://raw.githubusercontent.com/lastcoolnameleft/workshops/master/kubernetes/yaml/nginx-deployment.yaml'
2018-02-06 14:34:36,399 [MainThread  ] [DEBUG]  Response: 'deployment "nginx-deployment" deleted
'
2018-02-06 14:34:36,399 [MainThread  ] [DEBUG]  Execute command: 'kubectl label $NODE_NAME disktype-'
2018-02-06 14:34:36,674 [MainThread  ] [DEBUG]  Response: 'node "aks-nodepool1-39797000-0" labeled
'
